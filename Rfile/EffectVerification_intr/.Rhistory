enframe(name = "model_index", value = "formula")
#mapを利用して回帰分析
#mapは.xで受け取ったデータの一つ一つに対し.fで入力した関数を実行する
df_models <- models %>%
mutate(model = map(.x = formula, .f = lm, data = biased_data)) %>%
mutate(lm_result = map(.x = model, .f = tidy))
#モデルの結果を整形
df_results <- df_models %>%
mutate(formula = as.character(formula)) %>%
select(formula, model_index, lm_result) %>%
unnest(cols = c(lm_result))
#知りたいパラメータは
#「β1-α1（β1＝selectionbiaseを発生させる変数が説明変数として入っている時の介入変数の回帰係数
#        (α1=selectionbiaseを発生させる変数が説明変数として入っていない時の介入変数の回帰係数）」と
#「γ1β4（γ1=selectionbiaseを発生させている変数のモデル挿入時における介入変数の回帰係数）
#       (β4=selectionbiaseを発生させている変数のモデル挿入時の回帰係数」の２つ
#モデルA,B,Cからtreatmentのパラメータを抜き出す（α1、β1、γ1）
treatment_coef <- df_results %>%
filter(term == "treatment") %>%
pull(estimate)
#モデルBからhistoryのパラメータを抜き出す（β4）
history_coef <- df_results %>%
filter(model_index =="reg_B",
term == "history") %>%
pull(estimate)
#OVBの確認
OVB <- history_coef*treatment_coef[3] # γ1β4
coef_gap <- treatment_coef[1]-treatment_coef[2] #β1-α1
OVB
coef_gap
df_results
treatment_coef
library("tidyverse")
library("broom")
remotes::install_github("itamarcaspi/experimentdatar")
data(vouchers)
vouchers
vouchers
install.packages("devtools")
devtools::install_github("itamarcaspi/experimentdatar")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library("experimentdatar")
library("broom")
library("tidyverse")
data(vouchers)
vouchers
vouchers
formula_x_base <- "VOUCH0"
formula_x_covariate <- "SVY + HSVISIT + AGE + STRATA1 + STRATA2 + STRATA3 + STRATA4 + STRATA5 + STRATA6 + STRATAMS +
D1993 + D1995 + D1997 + DMONTH1 + DMONTH2 + DMONTH3 + DMONTH4 + DMONTH5 + DMONTH6 + DMONTH7 +
DMONTH8 + DMONTH9 + DMONTH10 + DMONTH11 + DMONTH12 + SEX2"
formula_y <- c("TOTSCYRS","INSCHL","PRSCH_C","USNGSCH","PRSCHA_1","FINISH6","FINISH7","FINISH8","REPT6","REPT","NREPT",
"MARRIED","HASCHILD","HOURSUM","WORKING3")
base_reg_formula <- paste(formula_y, "~", formula_x_base)
names(base_reg_formula) <- paste(formula_y, "base", sep = "_")
base_reg_formula
covariate_reg_formula <- paste(formula_y, "~", formula_x_base, "+", formula_x_covariate)
covariate_reg_formula
names(covariate_reg_formula) <- paste(formula_y, "covariate", sep = "_")
covariate_reg_formula
table3_formula <- c(base_reg_formula, covariate_reg_formula)
seq_len(3)
seq_len(3) %>% enframe()
seq_len(3) %>% enframe("col","sol")
install.packages("MatchIt")
library("MatchIt")
m_near <- matchit(formula = treatment ~ recency + history + channel,  #推定式を作っています
data = biased_data,                                 #データセットの指定
method = "nearest",                                 #マッチング方法の指定
replace = TRUE)
library("tidyverse")
head(m_near)
head(m_near,10)
?matchit
matched_data <- match.data(m_near)
PSM_result <- matched_data %>%
lm(spend ~ treatment,data = .) %>%
tidy()
PSM_result <- matched_data %>%
lm(spend ~ treatment,data = .) %>%
tidy()
library("tidyverse")
PSM_result <- matched_data %>%
lm(spend ~ treatment,data = .) %>%
tidy()
PSM_result <- matched_data %>%
lm(spend ~ treatment,data = .) %>%
tidy()
library("tidyverse")
library("tidyverse")
library("tidyverse")
library("MatchIt")
# ロジスティック回帰で傾向スコアを算出
ps_model <- glm(data = biased_data,                                   #データセットの指定
formula = treatment ~ recency + history + channel,    #推定式を作っています。
family = biomial)                                     #ロジスティック回帰を指定しています
# 傾向スコアを利用したマッチング
m_near <- matchit(formula = treatment ~ recency + history + channel,  #推定式を作っています
data = biased_data,                                 #データセットの指定
method = "nearest",                                 #マッチング方法の指定
replace = TRUE)
ps_model <- glm(data = biased_data,                                   #データセットの指定
formula = treatment ~ recency + history + channel,    #推定式を作っています。
family = binnomial)                                     #ロジスティック回帰を指定しています
# 傾向スコアを利用したマッチング
m_near <- matchit(formula = treatment ~ recency + history + channel,  #推定式を作っています
data = biased_data,                                 #データセットの指定
method = "nearest",                                 #マッチング方法の指定
replace = TRUE)
# ロジスティック回帰で傾向スコアを算出
ps_model <- glm(data = biased_data,                                   #データセットの指定
formula = treatment ~ recency + history + channel,    #推定式を作っています。
family = binomial)                                     #ロジスティック回帰を指定しています
# 傾向スコアを利用したマッチング
m_near <- matchit(formula = treatment ~ recency + history + channel,  #推定式を作っています
data = biased_data,                                 #データセットの指定
method = "nearest",                                 #マッチング方法の指定
replace = TRUE)
matched_data <- match.data(m_near)
PSM_result <- matched_data %>%
lm(spend ~ treatment,data = .) %>%
tidy()
PSM_result <- matched_data %>%
lm(spend ~ treatment,data = .) %>%
tidy()
?tidy
library("broom")
PSM_result <- matched_data %>%
lm(spend ~ treatment,data = .) %>%
tidy()
PSM_result1 <- matched_data %>%
lm(spend ~ treatment,data = .) %>%
tidy()
PSM_result2 <- matched_data %>%
lm(spend ~ treatment,data = matched_data) %>%
tidy()
PSM_result2 <- matched_data %>%
lm(spend ~ treatment,data = matched_data) %>%
tidy()
PSM_result2 <- matched_data %>%
lm(spend ~ treatment) %>%
tidy()
PSM_result2 <- matched_data %>%
lm(spend ~ treatment, data = matched_data) %>%
tidy()
lm(spend ~ treatment, data = matched_data)
PSM_result1
PSM_result <- matched_data %>%
lm(spend ~ treatment,data = .) %>%
tidy()
PSM_result
ps_model <- glm(data = biased_data,                                   #データセットの指定
formula = treatment ~ re
ps_model <- glm(data = biased_data,                                   #データセットの指定
formula = treatment ~ recency + history + channel,    #推定式を作っています。
family = binomial)
ps_model <- glm(data = biased_data,                                   #データセットの指定
formula = treatment ~ recency + history + channel,    #推定式を作っています。
family = binomial)
m_near <- matchit(formula = treatment ~ recency + history + channel,  #推定式を作っています
data = biased_data,                                 #データセットの指定
method = "nearest",                                 #マッチング方法の指定
replace = TRUE)
matched_data <- match.data(m_near)
# マッチング後のデータで効果の推定
PSM_result <- matched_data %>%
lm(spend ~ treatment,data = .) %>%
tidy()
PSM_result
source('~/Documents/R関連/EffectVerification_intr/chapter.3.R', encoding = 'SHIFT-JIS')
set.seed(1)       #乱数シードを発生
obs_rate_c <- 0.5
obs_rate_t <- 0.5 #条件に反応するサンプルを半分にする
biased_data <- male_df %>%
mutate(obs_rate_c = if_else((history > 300)|(recency < 6)|(channel=="Multichannel"),obs_rate_c,1),
obs_rate_t = if_else((history > 300)|(recency < 6)|(channel=="Multichannel"),1,obs_rate_t),
random_number = runif(n = NROW(male_df))) %>% #runifはデフォルトではmin=0,max=1になっている
filter((treatment == 0 & random_number < obs_rate_c)|(treatment == 1 & random_number < obs_rate_t))
ps_model <- glm(data = biased_data,                                   #データセットの指定
formula = treatment ~ recency + history + channel,    #推定式を作っています。
family = binomial)                                     #ロジスティック回帰を指定しています
# 傾向スコアを利用したマッチング
m_near <- matchit(formula = treatment ~ recency + history + channel,  #推定式を作っています
data = biased_data,                                 #データセットの指定
method = "nearest",                                 #マッチング方法の指定
replace = TRUE)
matched_data <- match.data(m_near)
# マッチング後のデータで効果の推定
PSM_result <- matched_data %>%
lm(spend ~ treatment,data = .) %>%
tidy()
PSM_result
mens_mail_biased <- biased_data %>%
filter(treatment == 1 ) %>%
pull(spend)
no_mail_biased <- biased_data %>%
filter(treatment == 0 ) %>%
pull(spend)
rct_ttest_biased <- t.test(mens_mail_biased, no_mail_biased, var.equal = TRUE)
rct_ttest_biased
install.packages("WeightIt")  #Iは大文字に注意
library("WeightIt")
library("tidyverse")
weighting <- weightit(formula = treatment ~ recency + history + channel,
data = biased_data,
method = "ps",
estimand = "ATE")
IPW_result <- lm(data = biased_data,
formula = spend ~ treatment,
weights = weighting$weights) %>%
tidy()
IPW_result
library("broom")
IPW_result <- lm(data = biased_data,
formula = spend ~ treatment,
weights = weighting$weights) %>%
tidy()
IPW_result
?bal.plot
install.pacleges("cobalt")
library("cobalt")
install.packages("cobalt")
library("cobalt")
?bal.plot
hist_weighting <- bal.plot(weighting, var.name="prop.score", which="both",
type = "histogram", mirror = TRUE,
sample.names = c("調整前","調整後")) +
scale_filldiscrete(name = "介入") +
labs(x="傾向スコア",y="割合",title="傾向スコア分布")
hist_weighting <- bal.plot(weighting, var.name="prop.score", which="both",
type = "histogram", mirror = TRUE,
sample.names = c("調整前","調整後")) +
scale_fill_discrete(name = "介入") +
labs(x="傾向スコア",y="割合",title="傾向スコア分布")
plot(hist_weighting)
hist_weighting <- bal.plot(weighting, var.name="prop.score", which="both",
type = "histogram", mirror = TRUE,
sample.names = c("調整前","調整後")) +
scale_fill_discrete(name = "介入") +
labs(x="傾向スコア",y="割合",title="傾向スコア分布")
hist_weighting <- bal.plot(weighting, var.name="prop.score", which="both",
type = "histogram", mirror = TRUE,
sample.names = c("調整前","調整後")) +
labs(x="傾向スコア",y="割合",title="傾向スコア分布")
hist_weighting <- bal.plot(weighting, var.name="prop.score", which="both",
type = "histogram", mirror = TRUE,
sample.names = c("調整前","調整後"))
plot(hist_weighting)
hist_weighting <- bal.plot(weighting, var.name="prop.score", which="both",
type = "histogram", mirror = TRUE,
sample.names = c("before","adjust"))
plot(hist_weighting)
IPW_result
hist_weighting <- bal.plot(weighting, var.name="prop.score", which="both",
type = "histogram", mirror = TRUE,
sample.names = c("before","adjust"))+
scale_fill_discrete(name = "処置") +
labs(x = "傾向スコア", y = "割合", title = "傾向スコアの分布")
library("tidyverse")
hist_weighting <- bal.plot(weighting, var.name="prop.score", which="both",
type = "histogram", mirror = TRUE,
sample.names = c("調整前","調整後"))+
scale_fill_discrete(name="介入") +
labs(x="傾向スコア", y="割合", title = "傾向スコアの分布")
plot(hist_weighting)
par(family= "HiraKakuProN-W3")
plot(hist_weighting)
plot_hist_weighting <- ggplot(hist_weighting)
par(family="utf-8")
plot(hist_weighting)
par(family="HiraKakuProN-W3")
plot(hist_weighting)
png("sin.png")
plot(hist_weighting)
dex.off()
png("sin.png")
plot(hist_weighting)
dev.off()
hist_weighting <- bal.plot(weighting, var.name="prop.score", which="both",
type = "histogram", mirror = TRUE,
sample.names = c("before","adjust"))+
scale_fill_discrete(name="treat") +
labs(x="PS", y="rate", title = "PS_distribution")
plot(hist_weighting)
#mマッチングしたデータでの共変量のバランス
love.plot(m_near, threshold = .1)
#重み付きデータでの共変量のバランス
love.plot(weighting, thresholds = .1)
library("cobalt")
love.plot(m_near, threshold = .1)
#重み付きデータでの共変量のバランス
love.plot(weighting, thresholds = .1)
bal_weighting <- love.plot(weighting, threshold = 0.1, abs = TRUE, grid = TRUE,
shapes = c(18, 20), color = c("tomato", "royalblue"),
sample.names = c("before", "adjust"),
title = "covariate balance") +
labs(x = "ASAM(abs)",
shape = "", size = "", stroke = "", colour = "")
plot(bal_weighting)
bal_weighting <- love.plot(weighting, threshold = 0.1, abs = TRUE, grid = TRUE,
shapes = c(18, 20), color = c("royalblue", "tomato"),
sample.names = c("adjust", "before"),
title = "covariate balance") +
labs(x = "ASAM(abs)",
shape = "", size = "", stroke = "", colour = "")
plot(bal_weighting)
weighting
love.plot(m_near, threshold = .1, abs = TRUE,)
#重み付きデータでの共変量のバランス
love.plot(weighting, thresholds = .1, abs = TRUE)
weighting
bal_weighting <- love.plot(weighting, threshold = 0.1, abs = TRUE, grid = TRUE,
shapes = c(18, 20), color = c("lightseagreen", "tomato"),
sample.names = c("adjust", "before"),
title = "covariate balance") +
labs(x = "ASAM(abs)",
shape = "", size = "", stroke = "", colour = "")
plot(bal_weighting)
library("tidyverse")
library("MatchIt")
library("broom")
sv1849  < - C（283、157、192、249、259、226、352、97、111、8、235、92）
## Lambeth Company＆Southwark and Vauxhall Company
lsv1849  < - C（256、267、312、257、318、446、143、193、243、215、544、187、153、81、113、176）
## 1849年・エリアのコレラ部死者
## サザークアンドヴォクソールカンパニーのみ
sv1854  < - C（371、161、148、362、244、237、282、59、171、9、240、174）
## Lambeth Company＆Southwark and Vauxhall Company
lsv1854  < - C（113、174、270、93、210、388、92、58、117、49、193、303、142、48、165、132）
## サザークアンドヴォクソールカンパニーのみ
sv1849 <- c(283,157,192,249,259,226,352,97,111,8,235,92)
## Lambeth Company＆Southwark and Vauxhall Company
lsv1849 <- c(256,267,312,257,318,446,143,193,243,215,544,187,153,81,113,176)
## 1849年・エリアのコレラ部死者
## サザークアンドヴォクソールカンパニーのみ
sv1854 <- c(371,161,148,362,244,237,282,59,171,9,240,174)
## Lambeth Company＆Southwark and Vauxhall Company
lsv1854 <- c(113,174,270,93,210,388,92,58,117,49,193,303,142,48,165,132)
sv_death <- c(cv1849,sv1854)
lsv_death <- c(lsv1849,lsv1854)
sv_death <- c(sv1849,sv1854)
lsv_death <- c(lsv1849,lsv1854)
sv_death
sv_area <- past0("sv_",c(1:length(sv1849),1:length(sv1854)))
sv_area <- past0("lsv_",c(1:length(lsv1849),1:length(lsv1854)))
## どのデータがどのエリアかを明示的に
sv_area <- paste0("sv_",c(1:length(sv1849),1:length(sv1854)))
sv_area <- paste0("lsv_",c(1:length(lsv1849),1:length(lsv1854)))
sv_area
sv_year <- c(req("1849",length(sv1849)),req("1854",length(sv1854)))
lsv_year <- c(req("1849",length(lsv1849)),req("1854",length(lsv1854)))
sv_year <- c(rep("1849",length(sv1849)),req("1854",length(sv1854)))
lsv_year <- c(rep("1849",length(lsv1849)),req("1854",length(lsv1854)))
sv_year <- c(rep("1849",length(sv1849)),rep("1854",length(sv1854)))
lsv_year <- c(rep("1849",length(lsv1849)),rep("1854",length(lsv1854)))
lsv_year
sv <- data.frame(area = sv_area,
year = sv_year,
death = sv_death,
LSV = "0",
company = "Southwark & Vauxhall")
sv <- data.frame(area = sv_area,
year = sv_year,
death = sv_death,
LSV = "0",
company = "Southwark & Vauxhall")
sv1849 <- c(283,157,192,249,259,226,352,97,111,8,235,92)
## Lambeth Company＆Southwark and Vauxhall Company
lsv1849 <- c(256,267,312,257,318,446,143,193,243,215,544,187,153,81,113,176)
## 1849年・エリアのコレラ部死者
## サザークアンドヴォクソールカンパニーのみ
sv1854 <- c(371,161,148,362,244,237,282,59,171,9,240,174)
## Lambeth Company＆Southwark and Vauxhall Company
lsv1854 <- c(113,174,270,93,210,388,92,58,117,49,193,303,142,48,165,132)
sv_death <- c(sv1849,sv1854)
lsv_death <- c(lsv1849,lsv1854)
## どのデータがどのエリアかを認識するためのラベル
sv_area <- paste0("sv_",c(1:length(sv1849),1:length(sv1854)))
sv_area <- paste0("lsv_",c(1:length(lsv1849),1:length(lsv1854)))
# paste  … ()内の要素を文字列に変換し、繋げて出力する関数
# paste0 … pasteと同じ役割だが、区切りなしで出力する →　paste( , seq="" ) == paste0()
## どのデータが何年のものかを認識するためのラベル
sv_year <- c(rep("1849",length(sv1849)),rep("1854",length(sv1854)))
lsv_year <- c(rep("1849",length(lsv1849)),rep("1854",length(lsv1854)))
## データフレーム化
sv <- data.frame(area = sv_area,
year = sv_year,
death = sv_death,
LSV = "0",
company = "Southwark & Vauxhall")
sv_area <- paste0("sv_",c(1:length(sv1849),1:length(sv1854)))
lsv_area <- paste0("lsv_",c(1:length(lsv1849),1:length(lsv1854)))
sv <- data.frame(area = sv_area,
year = sv_year,
death = sv_death,
LSV = "0",
company = "Southwark & Vauxhall")
lsv <- data.frame(area = lsv_area,
year = lsv_year,
death = lsv_death,
LSV = "1",
company = "Lambetg/Southwark & Vauxhall")
JS_sum <- rbind(sv, lsv) %>%
mutate(LSV = if_else(company = "Lambetg/Southwark & Vauxhall", 1, 0))
JS_sum <- rbind(sv, lsv) %>%
mutate(LSV = if_else(company == "Lambetg/Southwark & Vauxhall", 1, 0))
JS_df <- rbind(sv, lsv) %>%
mutate(LSV = if_else(company == "Lambetg/Southwark & Vauxhall", 1, 0))
JS_sum <-
JS_df %>%
group_by(company,LSV,year) %>%
summarise(death = sum(death))
JS_sum
JS_grp_summary <- JS_sum %>%
mutate(year = paste("year", year, seq = "_"),
death = log(death)) %>%
spread(year, death)
JS_grp_summary
JS_grp_summary <- JS_sum %>%
mutate(year = paste("year", year, seq = "_"),
death = log(death))
JS_grp_summary
JS_grp_summary <- JS_sum %>%
mutate(year = paste("year", year, sep = "_"),
death = log(death)) %>%
spread(year, death)
JS_grp_summary
JS_grp_summary <- JS_sum %>%
mutate(year = paste("year", year, sep = "_"),
death = log(death)) %>%
spread(year, death) %>%
mutate(gap = year_1854 - year_1849)
JS_grp_summary
JS_grp_summary <- JS_sum %>%
mutate(year = paste("year", year, sep = "_"),
death = log(death)) %>%
pivot_wider(
names_from = year,
values_from = death) %>%            # spreadよりpivot_widerの方が可読性が良い
mutate(gap = year_1854 - year_1849)
pivot_wider()
JS_grp_summary <- JS_sum %>%
mutate(year = paste("year", year, sep = "_"),
death = log(death)) %>%
pivot_wider(
names_from = LSV,year,
values_from = death) %>%            # spreadよりpivot_widerの方が可読性が良い
mutate(gap = year_1854 - year_1849)
JS_grp_summary <- JS_sum %>%
mutate(year = paste("year", year, sep = "_"),
death = log(death)) %>%
pivot_wider(
names_from = year,
values_from = death)
## 集計による推定(log)
JS_grp_summary <- JS_sum %>%
mutate(year = paste("year", year, sep = "_"),
death = log(death)) %>%
pivot_wider(
names_from = year,
values_from = death) %>%            # spreadよりpivot_widerの方が可読性が良い
mutate(gap = year_1854 - year_1849)
JS_grp_summary
JS_grp_summary <- JS_sum %>%
mutate(year = paste("year", year, sep = "_")) %>%
pivot_wider(names_from = year, values_from = death) %>%   # spreadよりpivot_widerの方が可読性が良い
mutate(gap = year_1854 - year_1849,
gap_rate = year_1854/year_1849 -1)
JS_grp_summary
JS_grp_summary_log <- JS_sum %>%
mutate(year = paste("year", year, sep = "_"), death = log(death)) %>%
pivot_wider(names_from = year, values_from = death) %>%   # spreadよりpivot_widerの方が可読性が良い
mutate(gap = year_1854 - year_1849)
JS_grp_summary_log
JS_grp_summary_log
data1 <-
JS_df %>%
group_by(company,LSV,year) %>%
summarise(death = sum(death))
library("tidyverse")
library("MatchIt")
library("broom")
data1 <-
JS_df %>%
group_by(company,LSV,year) %>%
summarise(death = sum(death))
result <- data1 %>%
mutate(year = paste("year", year, sep = "_")) %>%
pivot_wider(names_from = year, values_from = death) %>%   # spreadよりpivot_widerの方が可読性が良い
mutate(gap = year_1854 - year_1849,
gap_rate = year_1854/year_1849 -1)
result
result <- data1 %>%
mutate(year = paste("year", year, sep = "_")) %>%
pivot_wider(names_from = year, values_from = death) %>%   # spreadよりpivot_widerの方が可読性が良い
mutate(gap = year_1854 - year_1849,
gap_rate = year_1854/year_1849 -1)
result
result_log <- JS_sum %>%
mutate(year = paste("year", year, sep = "_"), death = log(death)) %>%
pivot_wider(names_from = year, values_from = death) %>%
mutate(gap = year_1854 - year_1849)
result_log
result
result_log
sv
result
data1
