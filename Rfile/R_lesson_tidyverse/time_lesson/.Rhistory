Nile
view(Nile)
library(tidyverse)
view(Nile)
view(WWWusage)
view(ldeaths)
view(airmiles)
discoveries
example(discoveries)
acf(discoveries)
class(Ih)
class(lh)
ls
ls
install.packages(datasets)
datasets
lh
start(UKgas)
end(UKgas)
frequency(UKgas)
window(UKgas,c(1975,2),c(1985,3))
ts.plot(UKgas)
#複数の時系列データを１つにプロット
ts.plot(ldeaths,mdeaths,fmeaths,gpars = list(xlab = "年", ylab = "死亡数",lyt = c(1:3), col = c(1:3)))
#複数の時系列データを１つにプロット
ts.plot(ldeaths,mdeaths,fdeaths,gpars = list(xlab = "年", ylab = "死亡数",lyt = c(1:3), col = c(1:3)))
ts.plot(ldeaths,mdeaths,fdeaths,gpars = list(xlab = "年", ylab = "死亡数",lyt = c(1:3), col = c(1:3)))
library(tidyverse)
#複数の時系列データを１つにプロット
ts.plot(ldeaths,mdeaths,fdeaths,gpars = list(xlab = "年", ylab = "死亡数",lty = c(1:3), col = c(1:3)))
library(tidyverse)
ldeaths
ggplot() +
geom_line(data = ldeaths)
class(ldeaths)
view(ldeaths)
ggplot() +
geom_line(data = ldeaths aes(x = V1))
ggplot() +
geom_line(data = ldeaths, aes(x = V1))
#パッケージのインストール
install.packages("ggpmisc")
library(gggmisc)
library(ggmisc)
library(ggpmisc)
library(scales)
library(scales)
ggplot(ldeaths, aes(Date, Value)) +
geom_line() +
scale_ldeaths_date(labels = date_format("%m/%d")) +
xlab("") +
ylab("Value")
ggplot(ldeaths, aes(Date, Value)) +
geom_line() +
scale_x_date(labels = date_format("%m/%d")) +
xlab("") +
ylab("Value")
view(ldeaths)
start(ldeaths)
end(ldeaths)
ggplot(xldeaths, aes(x = as.Date(Date), y = v))+   #x=Dateでなく、x=as.Date(Date)にする！
geom_line(size=2,
color="blue")+
xlab("date") + ylab("value")+
ggtitle("test")
ggplot(ldeaths, aes(x = as.Date(Date), y = v))+   #x=Dateでなく、x=as.Date(Date)にする！
geom_line(size=2,
color="blue")+
xlab("date") + ylab("value")+
ggtitle("test")
ggplot(ldeaths, aes(x = as.Date(Date), y = v))+   #x=Dateでなく、x=as.Date(Date)にする！
geom_line(size=2,
color="blue")+
xlab("date") + ylab("value")+
ggtitle("test")
ggplot(ldeaths, aes(x = year , y = V1)) +
geom_line
ggplot(ldeaths, aes(x = year , y = V1)) +
geom_line()
ggplot(ldeaths, aes(x = Year , y = V1)) +
geom_line()
ggplot(Nile, aes(x = Year , y = V1)) +
geom_line()
ggplot(df_Nile, aes(x = Year , y = V1)) +
geom_line()
ggplot(df_Nile, aes(x = Year , y = level)) +
geom_line()
Nile
ggplot(df_Nile, aes(x = Year , y = level)) +
geom_line()
ggplot(Nile, aes(x = Year , y = level)) +
geom_line()
library(tidyverse)
ggplot(Nile, aes(x = Year , y = level)) +
geom_line()
Nile
ggplot(df_Nile, aes(x = Year , y = level)) +
geom_line()
library(plotly)
library(forecat) ## 時系列分析のためのパッケージ
install.packages(plotly)
install.packages(forecast)
install.packages(forecast)
install.package(forecast)
install.packages(forecast)
install.packages(plotly)
install.packages(forecast)
library(forecast)
install.packages("forecast")
install.packages("plotly")
library(plotly)
library(forecast)
library(tidyverse)
ts.plot(cbind(Nile, 1.5*Nile, 0.5*Nile),
## 線の型を設定
lty = c("solid","dashed", "dashed"),
## 線の色を設定
col = c("gray", "green", "blue")
)
g <- g + geom_line(aes(y = Flow))
g <- g + geom_line(aes(y = Flow))
Nile_df <- data_frame(Year = time(Nile), Flow = Nile)
Nile
ts.plot(cbind(Nile, 1.5*Nile, 0.5*Nile), ## 線の型を設定
lty = c("solid","dashed", "dashed"), ## 線の色を設定
col = c("gray", "green", "blue")
)
Nile_df <- data_frame(Year = time(Nile), Flow = Nile)
g <- ggplot(data = Nile_df, aes(x = Year))
g <- g + geom_line(aes(y = Flow))
ggplot(data = Nile_df, aes(x = Year)) +
geom_line(aes(y = Flow))
ts.plot(Nile0
ts.plot(Nile)
ggplotly(df_Nile)
ggplotly(Nile_df)
ggplotly(g)
ggplotly(g)
ts.plot(ldeaths)
ts.plot(mdeaths)
ts.plot(cbind(ldeaths, mdeaths, fmeadths)
f <- ts.plot(cbind(ldeaths, mdeaths, fmeadths)
f <- ts.plot(cbind(ldeaths, mdeaths, fmeadths)
print(f)
legend(1977, 4000, c("全体","男性","女性"),lty = (1:3),col = c(1:3))
ts.plot(cbind(ldeaths, mdeaths, fmeadths,gpars = list(xlab = "年", ylab = "死亡数", lty = (1:3),col = c(1:3)))
legend(1977, 4000, c("全体","男性","女性"),lty = (1:3),col = c(1:3))
ts.plot(cbind(ldeaths, mdeaths, fmeadths,gpars = list(xlab = "年", ylab = "死亡数", lty = c(1:3),col = c(1:3)))
legend(1977, 4000, c("全体","男性","女性"),lty = c(1:3),col = c(1:3))
ts.plot(cbind(ldeaths, mdeaths, fmeadths,gpars = list(xlab = "年", ylab = "死亡数", lty = c(1:3),col = c(1:3)))
ts.plot(cbind(ldeaths, mdeaths, fmeadths,gpars = list(xlab = "年", ylab = "死亡数", lty = c(1:3),col = c(1:3)))
ts.plot(cbind(ldeaths, mdeaths, fmeadths,gpars = list(xlab = "年", ylab = "死亡数", lty = c(1:3),col = c(1:3)))
ts.plot(cbind(ldeaths, mdeaths, fmeadths,gpars = list(xlab = "年", ylab = "死亡数", lty = c(1:3),col = c(1:3)))
ts.plot(ldeaths, mdeaths, fmeadths,gpars = list(xlab = "年", ylab = "死亡数", lty = c(1:3),col = c(1:3)))
ts.plot(ldeaths, mdeaths, fdeaths,gpars = list(xlab = "年", ylab = "死亡数", lty = c(1:3),col = c(1:3)))
legend(1977, 4000, c("全体","男性","女性"),lty = c(1:3),col = c(1:3))
print(ff)
ff <- ts.plot(ldeaths, mdeaths, fdeaths,gpars = list(xlab = "年", ylab = "死亡数", lty = c(1:3),col = c(1:3)))
legend(1977, 4000, c("全体","男性","女性"),lty = c(1:3),col = c(1:3))
print(ff)
legend(1977, 4000, c("全体","男性","女性"),lty = c(1:3),col = c(1:3))
print(ff)
ts.plot(ldeaths, mdeaths, fdeaths,gpars = list(xlab = "年", ylab = "死亡数", lty = c(1:3),col = c(1:3)))
death <- ts.plot(ldeaths, mdeaths, fdeaths,gpars = list(xlab = "年", ylab = "死亡数", lty = c(1:3),col = c(1:3)))
death
death <- ts.plot(ldeaths, mdeaths, fdeaths,gpars = list(xlab = "年", ylab = "死亡数", lty = c(1:3),col = c(1:3)))
ts.plot(ldeaths, mdeaths, fdeaths,gpars = list(xlab = "年", ylab = "死亡数", lty = c(1:3),col = c(1:3)))
ts.plot(ldeaths, mdeaths, fdeaths,gpars = list(xlab = "年", ylab = "死亡数"))
death <- ts.plot(ldeaths, mdeaths, fdeaths,gpars = list(xlab = "年", ylab = "死亡数"))
death
death
View(Nile_df)
View(g)
view(death)
ldeaths
ts.plot(ldeaths)
ggploty(ddf)
library(dplyr) ## データ処理パッケージ
library(ggplot2) ## 汎用的な可視化パッケージ
library(forecast) ## 時系列分析のためのパッケージ
library(plotly) ## インタラクティブな図を作るためのパッケージ
ggplotly(ddf)
ggplotly(ddf)
ddf <- ggplot(data = death_df, aes(x = Year)) +
geom_line(aes(y = death))
death_df <- data_frame(Year = time(ldeaths), deaths = c(ldeaths, mdeaths, fdeaths))
ddf <- ggplot(data = death_df, aes(x = Year)) +
geom_line(aes(y = death))
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), deaths = c(ldeaths, mdeaths, fdeaths))
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), deaths = ldeaths)
ddf <- ggplot(data = death_df, aes(x = Year)) +
geom_line(aes(y = death))
ggplotly(ddf)
View(death_df)
ddf <- ggplot(data = death_df, aes(x = Year)) +
geom_line(aes(y = deaths))
death_df <- data_frame(Year = time(ldeaths), deaths = ldeaths)
ddf <- ggplot(data = death_df, aes(x = Year)) +
geom_line(aes(y = deaths))
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), deaths = ldeaths, mdeaths)
ddf <- ggplot(data = death_df, aes(x = Year)) +
geom_line(aes(y = deaths))
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), deaths = mdeaths)
death_df <- data_frame(Year = time(ldeaths), deaths = mdeaths)
ddf <- ggplot(data = death_df, aes(x = Year)) +
geom_line(aes(y = deaths))
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )
ddf <- ggplot(data = death_df, aes(x = Year)) +
geom_line(aes(y = deaths)) +
geom_line(aes(y = meaths)) +
geom_line(aes(y = feaths))
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )
ddf <- ggplot(data = death_df, aes(x = Year)) +
geom_line(aes(y = ldeaths)) +
geom_line(aes(y = mdeaths)) +
geom_line(aes(y = fdeaths))
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )
ddf <- ggplot(data = death_df, aes(x = Year)) +
geom_line(aes(y = ldeaths, color = "black")) +
geom_line(aes(y = mdeaths, color = "red")) +
geom_line(aes(y = fdeaths, color = "blue"))
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )
ddf <- ggplot(data = death_df, aes(x = Year, y = deaths)) +
geom_line(aes(y = ldeaths, color = "black")) +
geom_line(aes(y = mdeaths, color = "red")) +
geom_line(aes(y = fdeaths, color = "blue"))
ggplotly(ddf)
library(dplyr) ## データ処理パッケージ
library(ggplot2) ## 汎用的な可視化パッケージ
library(forecast) ## 時系列分析のためのパッケージ
library(plotly) ## インタラクティブな図を作るためのパッケージ
ggplotly(ddf)
ggplotly(ddf)
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )
ddf <- ggplot(data = death_df, aes(x = Year, y = deaths)) +
geom_line(aes(y = ldeaths)) +
geom_line(aes(y = mdeaths)) +
geom_line(aes(y = fdeaths))
ggplotly(ddf)
View(death_df)
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )  %>%
pivot_longer(col = Year, name_to = "year", value_to = "deaths")
library(tidyverse)
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )  %>%
pivot_longer(col = Year, name_to = "year", value_to = "deaths")
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )  %>%
pivot_longer(col = -Year, name_to = "year", value_to = "deaths")
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )  %>%
pivot_longer(col = -Year, names_to = "year", values_to = "deaths")
View(death_df)
ggplotly(ddf)
ggplotly(ddf)
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )  %>%
pivot_longer(col = -Year, names_to = "type", values_to = "deaths")
ggplotly(ddf)
ggplotly(ddf)
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )  %>%
pivot_longer(col = -Year, names_to = "type", values_to = "deaths")
ddf <- ggplot(data = death_df, aes(x = Year, y = deaths)) +
geom_line(color = type)
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )  %>%
pivot_longer(col = -Year, names_to = "type", values_to = "deaths")
ddf <- ggplot(data = death_df, aes(x = Year, y = deaths)) +
geom_line(mapping = aes(color = type))
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )  %>% #異なるファイルを統合
pivot_longer(col = -Year, names_to = "type", values_to = "deaths")
　　　# tidyなデータに変換　col：列を指定,names_to:新たに作る属性列の名前,valuus_to:新たに作る数値列の名前
ddf <- ggplot(data = death_df, aes(x = Year, y = deaths)) +　# プロット
geom_line(mapping = aes(color = type)) # 折れ線グラフのレイアウト調整
ggplotly(ddf)
ts.plot(ldeaths, mdeaths, fdeaths,gpars = list(xlab = "年", ylab = "死亡数"))
ggplotly(ddf)
library(tidyverse)
library(dplyr) ## データ処理パッケージ
library(ggplot2) ## 汎用的な可視化パッケージ
library(forecast) ## 時系列分析のためのパッケージ
library(plotly) ## インタラクティブな図を作るためのパッケージ
ts.plot(Nile)　##ナイルのデータをひとまずプロット
ts.plot(cbind(Nile, 1.5*Nile, 0.5*Nile), ## cbind関数で括ることで複数の時系列を表示できる（横に列を結合する関数）
lty = c("solid","dashed", "dashed"), ## 線の型を設定
col = c("gray", "green", "blue")## 線の色を設定
)
Nile_df <- data_frame(Year = time(Nile), Flow = Nile)　##時系列データをデータフレームに変換、ggplotはデータフレーム型式の方がわかりやすい
g <- ggplot(data = Nile_df, aes(x = Year)) + 　## plotするデータを決める
geom_line(aes(y = Flow))　　##折れ線グラフをマッピングする
ggplotly(g)       ##ggplotyでインタラクティブなグラフに！
##自分でやってみた##
ts.plot(ldeaths, mdeaths, fdeaths,gpars = list(xlab = "年", ylab = "死亡数"))
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )
ddf <- ggplot(data = death_df, aes(x = Year, y = deaths)) +
geom_line(aes(y = ldeaths, color = "black")) +
geom_line(aes(y = mdeaths, color = "red")) +
geom_line(aes(y = fdeaths, color = "blue"))
ggplotly(ddf)　　# 冗長出しうまく色変えできない。データフレームがtidyでないんだと気付く
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )  %>% #異なるファイルを統合
pivot_longer(col = -Year, names_to = "type", values_to = "deaths")
　　　# tidyなデータに変換　col：列を指定,names_to:新たに作る属性列の名前,valuus_to:新たに作る数値列の名前
ddf <- ggplot(data = death_df, aes(x = Year, y = deaths)) +　# プロット
geom_line(mapping = aes(color = type)) # 折れ線グラフのレイアウト調整
ggplotly(ddf)
death_df <- data_frame(Year = time(ldeaths), ldeaths = ldeaths, mdeaths = mdeaths, fdeaths = fdeaths )  %>% #異なるファイルを統合
pivot_longer(col = -Year, names_to = "type", values_to = "deaths")
　　　# tidyなデータに変換　col：列を指定,names_to:新たに作る属性列の名前,valuus_to:新たに作る数値列の名前
ddf <- ggplot(data = death_df, aes(x = Year, y = deaths)) +　# プロット
geom_line(mapping = aes(color = type)) # 折れ線グラフのレイアウト調整
ggplotly(ddf)
