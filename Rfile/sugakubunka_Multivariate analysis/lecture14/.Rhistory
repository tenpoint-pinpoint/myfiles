# デモデータセットの作成
data(iris)    # irisデータの読み込み
dat <- iris[iris$Species %in% c("versicolor", "virginica"),
c("Petal.Length", "Petal.Width", "Species")]
dat$Species <- factor(dat$Species, levels = c("versicolor", "virginica"))
head(dat, n = 5)
plot(dat, col = dat$Species)
library(MASS)
result <- qda(Species ~ Petal.Length + Petal.Width, data = dat)
result
# R言語のpredict関数で計算した判別得点
pred <- predict(result, dat[1, c("Petal.Length", "Petal.Width")])
pred$class
# R言語のpredict関数で計算した判別得点
pred <- predict(result, dat[1, c("Petal.Length", "Petal.Width")])
pred$class
# versicolor群の標本平均と分散共分散行列
dat_versi <- dat[dat$Species == "versicolor",
c("Petal.Length", "Petal.Width")]
xbar_versi <- apply(dat_versi, MARGIN = 2, FUN = mean)
cov_versi <- cov(dat_versi)
# virginica群の標本平均と分散共分散行列
dat_virgi <- dat[dat$Species == "virginica",
c("Petal.Length", "Petal.Width")]
xbar_virgi <- apply(dat_virgi, MARGIN = 2, FUN = mean)
cov_virgi <- cov(dat_virgi)
x <- dat[1, c("Petal.Length", "Petal.Width")]
d_versi <- mahalanobis(x = x, center = xbar_versi, cov = cov_versi)
d_virgi <- mahalanobis(x = x, center = xbar_virgi, cov = cov_virgi)
- d_versi + d_virgi
Sm <- cov(dat[dat$Species == "versicolor", c("Petal.Length", "Petal.Width")])
Sp <- cov(dat[dat$Species == "virginica", c("Petal.Length", "Petal.Width")])
SW <- 1/(100-2) * ((50-1)*Sm + (50-1)*Sp)
coef <- t(xbar_versi - xbar_virgi) %*% solve(SW)
coef
result <- lda(Species ~ Petal.Length + Petal.Width, data = dat)
coef / as.vector(result$scaling)
p11<-cbind(rnorm(n=25,mean=1,sd=0.5),rnorm(n=25,mean=1,sd=0.5))
p12<-cbind(rnorm(n=25,mean=-1,sd=0.5),rnorm(n=25,mean=1,sd=0.5))
p13<-cbind(rnorm(n=25,mean=-1,sd=0.5),rnorm(n=25,mean=-1,sd=0.5))
p14<-cbind(rnorm(n=25,mean=1,sd=0.5),rnorm(n=25,mean=-1,sd=0.5))
t<-as.factor(c(rep(0,50),rep(1,50)))
d1<-as.data.frame(cbind(rbind(p11,p13,p12,p14),t))
names(d1)<-c("x","y","label")
d1
setwd("~/Desktop/すうがくぶんか/集団授業/続初級統計学_改訂/lecture14")
?write.csv
write.csv(x = d1, file = "./data/XOR_demo.csv", row.names = TRUE)
write.csv(x = d1, file = "./data/XOR_demo.csv", row.names = FALSE)
dat <- read.csv("./data/XOR_demo.csv", fileEncoding = "utf-8-BOM")
dat <- read.csv("./data/XOR_demo.csv", fileEncoding = "utf-8")
head(data = dat, n = 5)
dat <- read.csv("./data/XOR_demo.csv", fileEncoding = "utf-8")
head(x = dat, n = 5)
plot(dat$x, dat$y, col = dat$label)
install.packages("rpart")
?rpart
library(rpart)
?rpart
?rpart
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 30,
minbucket = 10))
result
install.packages("party")
install.packages("partykit")
library(partykit)
plot(as.party(result))
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
library(partykit)
plot(as.party(result))
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 3,
minsplit = 20,
minbucket = 5))
result
library(partykit)
plot(as.party(result))
?as.party
library(partykit)
plot(result)
library(partykit)
plot(as.party(result))
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
library(partykit)
plot(as.party(result))
dat <- read.csv("./data/XOR_demo.csv", fileEncoding = "utf-8")
dat$label <- as.factor(dat$label)
head(x = dat, n = 5)
plot(dat$x, dat$y, col = dat$label)
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
library(partykit)
plot(as.party(result))
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 4,
minsplit = 20,
minbucket = 5))
result
library(partykit)
plot(as.party(result))
0
0
0
p11<-cbind(rnorm(n=25,mean=1,sd=0.5),rnorm(n=25,mean=1,sd=0.5))
p12<-cbind(rnorm(n=25,mean=-1,sd=0.5),rnorm(n=25,mean=1,sd=0.5))
p13<-cbind(rnorm(n=25,mean=-1,sd=0.5),rnorm(n=25,mean=-1,sd=0.5))
p14<-cbind(rnorm(n=25,mean=1,sd=0.5),rnorm(n=25,mean=-1,sd=0.5))
t<-as.factor(c(rep(0,50),rep(1,50)))
d1<-as.data.frame(cbind(rbind(p11,p13,p12,p14),t))
names(d1)<-c("x","y","label")
d1
plot(d1, col = d1$label)
write.csv(d1, "./data/XOR_demo.csv", row.names = FALSE)
dat <- read.csv("./data/XOR_demo.csv", fileEncoding = "utf-8")
dat$label <- as.factor(dat$label)
head(x = dat, n = 5)
plot(dat$x, dat$y, col = dat$label)
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
library(partykit)
plot(as.party(result))
p11<-cbind(rnorm(n=25,mean=1,sd=0.5),rnorm(n=25,mean=1,sd=0.5))
p12<-cbind(rnorm(n=25,mean=-1,sd=0.5),rnorm(n=25,mean=1,sd=0.5))
p13<-cbind(rnorm(n=25,mean=-1,sd=0.5),rnorm(n=25,mean=-1,sd=0.5))
p14<-cbind(rnorm(n=25,mean=1,sd=0.5),rnorm(n=25,mean=-1,sd=0.5))
t<-as.factor(c(rep(0,75),rep(1,25)))
d1<-as.data.frame(cbind(rbind(p11,p13,p12,p14),t))
names(d1)<-c("x","y","label")
write.csv(d1, "./data/split_demo.csv", row.names = FALSE)
dat <- read.csv("./data/split_demo.csv", fileEncoding = "utf-8")
dat$label <- as.factor(dat$label)
head(x = dat, n = 5)
plot(dat$x, dat$y, col = dat$label)
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
library(partykit)
plot(as.party(result))
dat <- read.csv("./data/XOR_demo.csv", fileEncoding = "utf-8")
dat$label <- as.factor(dat$label)
head(x = dat, n = 5)
plot(dat$x, dat$y, col = dat$label)
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 3,
minsplit = 20,
minbucket = 5))
result
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
library(partykit)
plot(as.party(result))
result$variable.importance
1-(0.75^2+0.25^2)
1-(0.98^2+0.02^2)
1-(0.47^2+0.53^2)
result
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
result
dat <- read.csv("./data/split_demo.csv", fileEncoding = "utf-8")
dat$label <- as.factor(dat$label)
head(x = dat, n = 5)
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
result
# 変数重要度の計算
I_parent <- (100/100) * (1 - (0.75^2+0.25^2))
I_left <- (55/100) * (1 - (0.98^2+0.18^2))
I_right <- (45/100) * (1 - 0.46^2+0.53^2)
I_parent - (I_left + I_right)
# 変数重要度の計算
I_parent <- 100* (1 - (0.75^2+0.25^2))
I_left <- 55 * (1 - (0.98^2+0.18^2))
I_right <- 45 * (1 - 0.46^2+0.53^2)
I_parent - (I_left + I_right)
rpart
str(result)
result$variable.importance
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
library(partykit)
plot(as.party(result))
result$variable.importance
library(partykit)
plot(as.party(result))
result$variable.importance
dat <- read.csv("./data/XOR_demo.csv", fileEncoding = "utf-8")
dat$label <- as.factor(dat$label)
head(x = dat, n = 5)
# この散布図から、事前に適切なif-thenルールを想定してください。
plot(dat$x, dat$y, col = dat$label)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
# 得られた決定木と想定したif-thenルールを比較してみましょう。
plot(as.party(result))
dat <- read.csv("./data/split_demo.csv", fileEncoding = "utf-8")
dat$label <- as.factor(dat$label)
head(x = dat, n = 5)
plot(dat$x, dat$y, col = dat$label)
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
library(partykit)
plot(as.party(result))
result$variable.importance
result$splits
result$frame
fpri <- which(ff$var != "<leaf>")
ff<-result$frame
fpri <- which(ff$var != "<leaf>")
fpri
spri <- 1 * cumsum(c(0, 1+ff$ncompete[fpri]+ff$nsurrogate[fpri]))
spri
spri[seq_along(fpri)]
ff$nsurrogate[fpri]
spri <- spri[seq_along(fpri)]
nsurr <- ff$nsurrogate[fpri]
scaled.imp <- result$splits[spri, "improve"]
scaled.imp
spri <- 1 * cumsum(c(0, 1+ff$ncompete[fpri]+ff$nsurrogate[fpri]))
spri <- spri[seq_along(fpri)]
scaled.imp <- result$splits[spri, "improve"]
scaled.imp
spri
result$splits
dat <- read.csv("./data/split_demo.csv", fileEncoding = "utf-8")
dat$label <- as.factor(dat$label)
head(x = dat, n = 5)
plot(dat$x, dat$y, col = dat$label)
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
library(partykit)
plot(as.party(result))
result$variable.importance
dat <- read.csv("./data/XOR_demo.csv", fileEncoding = "utf-8")
dat$label <- as.factor(dat$label)
head(x = dat, n = 5)
# この散布図から、事前に適切なif-thenルールを想定してください。
plot(dat$x, dat$y, col = dat$label)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
# 得られた決定木と想定したif-thenルールを比較してみましょう。
plot(as.party(result))
str(result)
summary(result)
result$variable.importance
result$variable.importance
library(partykit)
plot(as.party(result))
dat <- read.csv("./data/split_demo.csv", fileEncoding = "utf-8")
dat$label <- as.factor(dat$label)
head(x = dat, n = 5)
plot(dat$x, dat$y, col = dat$label)
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
library(partykit)
plot(as.party(result))
result$variable.importance
summary(result)
result$splits
importance(result)
rpart::importance(result)
importance <- function(fit)
{
ff <- fit$frame
fpri <- which(ff$var != "<leaf>")  # points to primary splits in ff
spri <- 1 + cumsum(c(0, 1 + ff$ncompete[fpri] + ff$nsurrogate[fpri]))
spri <- spri[seq_along(fpri)] # points to primaries in the splits matrix
nsurr <- ff$nsurrogate[fpri]  # number of surrogates each has
sname <- vector("list", length(fpri))
sval <- sname
## The importance for primary splits needs to be scaled
## It was a printout choice for the anova method to list % improvement in
##  the sum of squares, an importance calculation needs the total SS.
## All the other methods report an unscaled change.
scaled.imp <- if (fit$method == "anova")
fit$splits[spri, "improve"] * ff$dev[fpri]
else fit$splits[spri, "improve"]
sdim <- rownames(fit$splits)
for (i in seq_along(fpri)) {
## points to surrogates
if (nsurr[i] > 0L) {
indx <- spri[i] + ff$ncompete[fpri[i]] + seq_len(nsurr[i])
sname[[i]] <- sdim[indx]
sval[[i]] <- scaled.imp[i] * fit$splits[indx, "adj"]
}
}
import <- tapply(c(scaled.imp, unlist(sval)),
c(as.character(ff$var[fpri]), unlist(sname)),
sum)
sort(c(import), decreasing = TRUE) # a named vector
}
importance(result)
ff <- result$frame
ff
fpri <- which(ff$var != "<leaf>")  # points to primary splits in ff
fpri
spri <- 1 + cumsum(c(0, 1 + ff$ncompete[fpri] + ff$nsurrogate[fpri]))
spri
spri <- spri[seq_along(fpri)] # points to primaries in the splits matrix
spri
nsurr <- ff$nsurrogate[fpri]  # number of surrogates each has
nsurr
sname <- vector("list", length(fpri))
sval <- sname
scal
sval
scaled.imp <- fit$splits[spri, "improve"]
scaled.imp <- result$splits[spri, "improve"]
scaled.imp
result$splits
spri
sdim <- rownames(fit$splits)
sdim <- rownames(result$splits)
sdim
nsurr
for (i in seq_along(fpri)) {
## points to surrogates
if (nsurr[i] > 0L) {
indx <- spri[i] + ff$ncompete[fpri[i]] + seq_len(nsurr[i])
sname[[i]] <- sdim[indx]
sval[[i]] <- scaled.imp[i] * fit$splits[indx, "adj"]
}
}
indx
sdim
sname
sval
tapply(c(scaled.imp, unlist(sval)),
c(as.character(ff$var[fpri]), unlist(sname)),
sum)
ff <- result$frame
fpri <- which(ff$var != "<leaf>")  # points to primary splits in ff
spri <- 1 + cumsum(c(0, 1 + ff$ncompete[fpri] + ff$nsurrogate[fpri]))
spri <- spri[seq_along(fpri)] # points to primaries in the splits matrix
nsurr <- ff$nsurrogate[fpri]  # number of surrogates each has
sname <- vector("list", length(fpri))
sval <- sname
scaled.imp <- result$splits[spri, "improve"]
sdim <- rownames(result$splits)
for (i in seq_along(fpri)) {
## points to surrogates
if (nsurr[i] > 0L) {
indx <- spri[i] + ff$ncompete[fpri[i]] + seq_len(nsurr[i])
sname[[i]] <- sdim[indx]
sval[[i]] <- scaled.imp[i] * fit$splits[indx, "adj"]
}
}
sval[[i]] <- scaled.imp[i] * result$splits[indx, "adj"]
sdim <- rownames(result$splits)
for (i in seq_along(fpri)) {
## points to surrogates
if (nsurr[i] > 0L) {
indx <- spri[i] + ff$ncompete[fpri[i]] + seq_len(nsurr[i])
sname[[i]] <- sdim[indx]
sval[[i]] <- scaled.imp[i] * result$splits[indx, "adj"]
}
}
tapply(c(scaled.imp, unlist(sval)),
c(as.character(ff$var[fpri]), unlist(sname)),
sum)
i<-^1
i<-1
## points to surrogates
if (nsurr[i] > 0L) {
indx <- spri[i] + ff$ncompete[fpri[i]] + seq_len(nsurr[i])
sname[[i]] <- sdim[indx]
sval[[i]] <- scaled.imp[i] * result$splits[indx, "adj"]
}
indx
sname
sval
scaled.imp
result$splits
c(scaled.imp, unlist(sval))
c(as.character(ff$var[fpri]), unlist(sname))
dat <- read.csv("./data/split_demo.csv", fileEncoding = "utf-8")
dat$label <- as.factor(dat$label)
head(x = dat, n = 5)
plot(dat$x, dat$y, col = dat$label)
library(rpart)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
library(partykit)
plot(as.party(result))
result$variable.importance
dat <- read.csv("./data/XOR_demo.csv", fileEncoding = "utf-8")
dat$label <- as.factor(dat$label)
head(x = dat, n = 5)
# この散布図から、事前に適切なif-thenルールを想定してください。
plot(dat$x, dat$y, col = dat$label)
result <- rpart(formula = label ~ x + y,
data = dat,
method = "class",
control = rpart.control(maxdepth = 2,
minsplit = 20,
minbucket = 5))
result
# 得られた決定木と想定したif-thenルールを比較してみましょう。
plot(as.party(result))
