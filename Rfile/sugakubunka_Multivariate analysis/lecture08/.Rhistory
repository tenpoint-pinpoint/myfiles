X_scale
# 主成分得点
scale(dat) %*% result$vectors
### prcomp関数を用いた主成分分析の計算 ###
result <- prcomp(dat, scale. = TRUE)
result
# 主成分と寄与率を求める
cormat <- cor(dat)
result <- eigen(cormat)
result
sqrt(1.5728539)
summary(result)
result
### prcomp関数を用いた主成分分析の計算 ###
result <- prcomp(dat, scale. = TRUE)
result
summary(result)
# 主成分得点
result$x
# 主成分負荷量
cor(dat, result$x)
# 麺と第1主成分得点の相関係数の公式
0.5715110 * 1.2541347    # 麺の係数 * 第1主成分の標準偏差
# biplot
biplot(result)
# biplot
par(family = "ヒラギノ角ゴシック W3")
biplot(result)
# mtcarsデータセット
dat <- read.csv("mtcars_numeric.csv",
fileEncoding = "utf-8"
row.names = "model")
# mtcarsデータセット
dat <- read.csv("mtcars_numeric.csv",
fileEncoding = "utf-8",
row.names = "model")
# mtcarsデータセット
dat <- read.csv("./data/mtcars_numeric.csv",
fileEncoding = "utf-8",
row.names = "model")
head(dat, n = 5)
# データの読み込み
dat <- read.csv("./data/ramen.csv", fileEncoding = "cp932", row.names = "店名")
dat
?psych::fa
fa
setwd("~/Desktop/すうがくぶんか/集団授業/続初級統計学_改訂/lecture08/data")
# デモ
dat <- read.csv("ramen.csv", fileEncoding = "cp932")
head(dat, n = 5)
### デモ ###
# 必要なパッケージの読み込み
library(psych)
# 相関係数の確認
cor(dat)
# 相関係数の確認
cor(dat)
# データの読み込み
dat <- read.csv("ramen.csv", fileEncoding = "cp932",
row.names = "店名")
head(dat, n = 5)
# 相関係数の確認
cor(dat)
# 因子分析
# 因子負荷量は無限に解がある。
result <- fa(dat, nfactors = 2, rotate = "none")
result
# 因子分析
# 因子負荷量は無限に解がある。
result <- fa(dat, nfactors = 2, fm = "ml", rotate = "none")
result
result$loadings
str(result$loadings)
matrix(result$loadings)
result$scores
# varimax回転という基準を採用した場合
result <- fa(dat, nfactors = 2, fm = "ml", rotate = "varimax")
result$loadings
result$scores
# promax回転という基準を採用した場合
result <- fa(dat, nfactors = 2, fm = "ml", rotate = "promax")
result$loadings
result$scores
result
# 因子分析
# 因子負荷量は無限に解がある。
# とりあえず一つ解を求めた場合。
result <- fa(dat, nfactors = 2, fm = "ml", rotate = "none")
result$loadings
result$scores
result
0.51^2 + 0.38^2
# promax回転という基準を採用した場合
result <- fa(dat, nfactors = 2, fm = "ml", rotate = "promax")
result$loadings
result$scores
result
0.32^2+0.07^2
0.32^2+0.07^2+2*0.71*0.32*0.07
str(result)
# 共通性 = f1の因子負荷^2 + f2の因子負荷^2 + 2*因子負荷の積
# 因子得点で各変数を説明したときの決定係数と解釈してよい。
result$communalities
# 因子得点の散布図
plot(result$scores)
axis(1, at=1:10, labels=row.names(dat))
# 因子得点の散布図
plot(result$scores)
axis(1, at=1:10, labels=row.names(dat))
(result$scores)
# 因子得点の散布図
plot(result$scores)
?text
text(result$scores, labels=rownames(dat))
# 因子得点の散布図
par(family = "ヒラギノ角Pro W3")
plot(result$scores)
text(result$scores, labels=rownames(dat))
# 因子得点の散布図
par(family = "ヒラギノ角ゴシック W3")
plot(result$scores)
text(result$scores, labels=rownames(dat))
text(result$scores, labels=rownames(dat), font = 2)
# 因子得点の散布図
par(family = "ヒラギノ角ゴシック W3")
plot(result$scores, type = "n")
text(result$scores, labels=rownames(dat), font = 2)
?text
text(result$scores, labels=rownames(dat), cex = 0.5)
# 因子得点の散布図
par(family = "ヒラギノ角ゴシック W3")
plot(result$scores, type = "n")
text(result$scores, labels=rownames(dat), cex = 0.5)
# 因子得点の散布図
par(family = "ヒラギノ角ゴシック W3")
plot(result$scores, type = "n")
text(result$scores, labels=rownames(dat), cex = 0.7)
# promax回転という基準を採用した場合
result <- fa(dat, nfactors = 2, fm = "ml", rotate = "promax")
result$loadings
result$scores
result
result$loadings
# varimax回転という基準を採用した場合
result <- fa(dat, nfactors = 2, fm = "ml", rotate = "varimax")
result$loadings
result$scores
# 因子得点の散布図
par(family = "ヒラギノ角ゴシック W3")
plot(result$scores, type = "n")
text(result$scores, labels=rownames(dat), cex = 0.7)
result$loadings
# 因子分析
# 因子負荷量は無限に解がある。
# とりあえず一つ解を求めた場合。
result <- fa(dat, nfactors = 2, fm = "ml", rotate = "none")
result$loadings
# 必要なライブラリのロード
library(MASS)
library(dplyr)
library(ggplot2)
# デモデータの生成
X <- rbind(mvrnorm(100,c(-2, -2),matrix(c(1, 0, 0, 1), 2, 2)),
mvrnorm(100,c(2, 2),matrix(c(1, 0, 0, 1), 2, 2)))
data <- data_frame(X1 = X[ , 1], X2 = X[ , 2])
ggplot(data, aes(x = X1, y = X2)) + geom_point()
# ランダムにクラスター(culster = 0 or 1)に割り振る
data$cluster <- rbinom(n = 200, size = 1, prob = 0.5)    # 割り振り
data    # 結果の確認
ggplot(data, aes(x = X1, y = X2, colour = factor(cluster))) + geom_point()
# クラスターの重心の計算
center <- data %>% group_by(cluster) %>% summarize(X1 = mean(X1), X2 = mean(X2))
center
ggplot(data, aes(x = X1, y = X2, colour = factor(cluster))) + geom_point() +
geom_point(data = center, aes(x = X1, y = X2, colour = factor(cluster)), shape = 3)    # 重心を+で表現する。
data$dist_cluster_0 <- (data$X1-center$X1[1])^2 + (data$X2-center$X2[1])^2
data$dist_cluster_1 <- (data$X1-center$X1[2])^2 + (data$X2-center$X2[2])^2
data$cluster <- as.numeric(data$dist_cluster_0 > data$dist_cluster_1)
data
ggplot(data, aes(x = X1, y = X2, colour = factor(cluster))) + geom_point()
sqrt((12-8.9)^2+(5-5.9)^2+(3-7.5)^2)
sqrt((12-5)^2+(5-4.5)^2+(3-9.1)^2)
1/703
24500*(18+16+6) + 34500*6 + 3520000 + 960000 + 13000*2*8
# 因子分析
# 因子負荷量は無限に解がある。解釈しやすい解を探す。
# とりあえず一つ解を求めた場合。
result <- fa(dat, nfactors = 2, fm = "ml", rotate = "none")
result$loadings
result$scores
# 因子分析
# 因子負荷量は無限に解がある。解釈しやすい解を探す。
# とりあえず一つ解を求めた場合。
result <- fa(scale(dat), nfactors = 2, fm = "ml", rotate = "none")
result$loadings
result$scores
# 因子分析
# 因子負荷量は無限に解がある。解釈しやすい解を探す。
# とりあえず一つ解を求めた場合。
result <- fa(dat, nfactors = 2, fm = "ml", rotate = "none")
result$loadings
result$scores
# promax回転解
result <- fa(dat, nfactors = 2, fm = "ml", rotate = "promax")
result$loadings
result$scores
str(result)
result
setwd("~/Desktop/すうがくぶんか/集団授業/続初級統計学_改訂/lecture08")
# faパッケージの読み込み
# install.packages("fa")
library(fa)
# faパッケージの読み込み
# install.packages("psych")
library(psych)
# データの読み込み
dat <- read.csv("./data/ramen.csv", fileEncoding = "cp932", row.names = "店名")
dat
# 因子負荷量の初期値
result_none <- fa(dat, nfactors = 2, fm = "ml", rotate = "none")
result_none$loadings
# 共通性
result_none$communalities
result_varimax <- fa(dat, nfactors = 2, fm = "ml", rotate = "varimax")
result_varimax$loadings
result_varimax$communalities
result_promax <- fa(dat, nfactors = 2, fm = "ml", rotate = "promax")
result_promax$loadings
result_promax$communalities
# 因子間相関
matrix(result_promax$Phi, ncol = 2)
# 因子得点
result_promax$scores
# 因子得点の散布図
par(family = "ヒラギノ角ゴシック W3")   # Macユーザーのみ
plot(result_promax$scores, type = "n")
text(result_promax$scores, labels=rownames(dat), cex = 0.7)
library(TSSS)
data(HAKUSAN)
head(HAKUSAN[,1])
ar(HAKUSAN[,1], order.max = 3)
result_acf <- acf(HAKUSAN[,1])
result_acf[1:3]
covmat <- matrix(c(1    , 0.718, 0.112,
0.718, 1    , 0.718,
0.112, 0.718, 1   ), ncol = 3)
solve(covmat) %*% c(0.718, 0.112, -0.397)
?ar
# 次回の話 : 偏自己相関はARの偏回帰係数
result_pacf <- pacf(HAKUSAN[,1])
result_pacf$acf[1:3]
ar(HAKUSAN[,1], order.max = 3)
ar(HAKUSAN[,1], order.max = 2)
result_pacf$acf[1:3]
ar(HAKUSAN[,1], order.max = 2)
# データの読み込み
dat <- read.csv("./data/ramen.csv", fileEncoding = "cp932", row.names = "店名")
dat
# 因子負荷量の初期値
result_none <- fa(dat, nfactors = 2, fm = "ml", rotate = "none")
result_none$loadings
# 共通性
result_none$communalities
result$loadings
result_none$loadings
print(result_none$loadings, cutoff = 0)
result_varimax <- fa(dat, nfactors = 2, fm = "ml", rotate = "varimax")
print(result_varimax$loadings, cutoff = 0)
result_promax <- fa(dat, nfactors = 2, fm = "ml", rotate = "promax")
print(result_promax$loadings, cutoff = 0)
result_varimax <- fa(dat, nfactors = 2, fm = "ml", rotate = "varimax")
print(result_varimax$loadings, cutoff = 0)
result_varimax$communalities
result_promax <- fa(dat, nfactors = 2, fm = "ml", rotate = "promax")
print(result_promax$loadings, cutoff = 0)
result_promax$communalities
# 因子間相関
matrix(result_promax$Phi, ncol = 2)
# 因子得点
result_promax$scores
# 因子得点の散布図
par(family = "ヒラギノ角ゴシック W3")   # Macユーザーのみ
plot(result_promax$scores, type = "n")
text(result_promax$scores, labels=rownames(dat), cex = 0.7)
result_varimax$ladings^3
result_varimax$loadings^3
result_varimax$loadings^2
result_varimax$loadings^3
result_varimax$loading
result_varimax$loadings
rowSums(result_varimax$loadings^R2)
rowSums(result_varimax$loadings^2)
result_varimax$loadings / rowSums(result_varimax$loadings^2)
result_varimax$loadings / sqrt(rowSums(result_varimax$loadings^2))
0.191/sqrt(0.319^2+0.191^2)
tmp <- result_varimax$loadings / sqrt(rowSums(result_varimax$loadings^2))
max(tmp)
?ax
?max
pmax(tmp)
apply(tmp, 1, max)
tmp / apply(tmp, 1, max)
tmp <- tmp / apply(tmp, 1, max)
tmp^3/tmp
tmp^4/tmp
result_promax <- fa(dat, nfactors = 2, fm = "ml", rotate = "Promax")
print(result_promax$loadings, cutoff = 0)
result_promax$communalities
# 因子間相関
matrix(result_promax$Phi, ncol = 2)
# 因子得点
result_promax$scores
# 因子得点の散布図
par(family = "ヒラギノ角ゴシック W3")   # Macユーザーのみ
plot(result_promax$scores, type = "n")
text(result_promax$scores, labels=rownames(dat), cex = 0.7)
x <- result_varimax$loadings
Q <- x * abs(x)^3
U <- lm.fit(x, Q)$coefficiens
d <- diag(solve(t(U) %*% U))
solve(t(U)%*%U)
t(U)%*%U
U
x
Q
x$loadings
x
Q
?lm
?lm.fit
U <- lm.fit(x, Q)$coefficients
U
x %*% U
Q
print(Q, cutoff = 0)
Q
print(Q, cutoff = 0)
x %*% U
lm(Q~x)
d <- diag(solve(t(U)%*%U))
d
x <- result_varimax$loadings
Q <- x * abs(x)^3
U <- lm.fit(x, Q)$coefficients
d <- diag(solve(t(U)%*%U))
x %*% U %*% diag(sqrt(d))
result_promax$loadings
print(result_promax$loadings, cutoff = 0)
x %*% U %*% diag(sqrt(d))
x <- result_varimax$loadings
Q <- x * abs(x)^3
Q
x <- result_varimax$loadings
Q <- x * abs(x)^3
print(Q, cutoff = 0)
U <- lm.fit(x, Q)$coefficients
d <- diag(solve(t(U)%*%U))
x %*% U %*% diag(sqrt(d))
print(result_promax$loadings, cutoff = 0)
# 目標行列に最も近い因子負荷行列を求める
U <- lm.fit(x, Q)$coefficients
d <- diag(solve(t(U)%*%U))
x %*% U %*% diag(sqrt(d))
# 結果を`fa(rotate="Promax")`と比較してみよう
print(result_promax$loadings, cutoff = 0)
?varimax
varimax
# faパッケージの読み込み
# install.packages("psych")
library(psych)
# データの読み込み
dat <- read.csv("./data/ramen.csv", fileEncoding = "cp932", row.names = "店名")
dat
# 因子負荷量の初期値
result_none <- fa(dat, nfactors = 2, fm = "ml", rotate = "none")
print(result_none$loadings, cutoff = 0)
# 共通性
result_none$communalities
result_varimax <- fa(dat, nfactors = 2, fm = "ml", rotate = "varimax")
print(result_varimax$loadings, cutoff = 0)
result_varimax$communalities
result_promax <- fa(dat, nfactors = 2, fm = "ml", rotate = "Promax")
print(result_promax$loadings, cutoff = 0)
result_promax$communalities
# 因子間相関
matrix(result_promax$Phi, ncol = 2)
# 因子得点
result_promax$scores
# 因子得点の散布図
par(family = "ヒラギノ角ゴシック W3")   # Macユーザーのみ
plot(result_promax$scores, type = "n")
text(result_promax$scores, labels=rownames(dat), cex = 0.7)
# 目標行列を求める
x <- result_varimax$loadings
Q <- x * abs(x)^3    # 符号を保つためにabs^3にした。
print(Q, cutoff = 0)
# 目標行列に最も近い因子負荷行列を求める
U <- lm.fit(x, Q)$coefficients
d <- diag(solve(t(U)%*%U))
x %*% U %*% diag(sqrt(d))
# 結果を`fa(rotate="Promax")`と比較してみよう
print(result_promax$loadings, cutoff = 0)
?lm.fit
lm.fit
lm.fit(x, Q)
lm.fit(x, Q)$coefficients
lm
lm.fit(x, Q[,1])
lm.fit(x, Q[,1])$coefficients
lm.fit(x, Q)$coefficients
lm(Q[,1]~x)
lm(Q[,1]~x, offset = 0)
lm(Q[,1]~x+0)
# 目標行列に最も近い因子負荷行列を求める
U <- lm.fit(x, Q)$coefficients    # Qの各列に対して切片0の線形回帰を行う。
d <- diag(solve(t(U)%*%U))    # 因子得点の標準偏差を1にするためのスケーリングを求める。
x %*% U %*% diag(sqrt(d))
# バリマックス回転解に掛ける行列の求め方
u <- data.frame(f1_load = x[, 1], f2_load = x[, 2], q = Q[,1])
lm(q ~ 0+f1_load+f2_load)
# バリマックス回転解に掛ける行列の求め方
u <- data.frame(f1_load = x[, 1], f2_load = x[, 2], q = Q[,1])
lm(q ~ 0+f1_load+f2_load, data = u)
# 目標行列に最も近い因子負荷行列を求める
U <- lm.fit(x, Q)$coefficients    # Qの各列に対して切片0の線形回帰を行う。
U
# x%*%Uを因子負荷行列にすると因子得点の標準偏差が1にならない。
d <- diag(solve(t(U)%*%U))    # 因子得点の標準偏差を1にするためのスケーリングを求める。
x %*% U %*% diag(sqrt(d))
# faパッケージの読み込み
# install.packages("psych")
library(psych)
# データの読み込み
dat <- read.csv("./data/ramen.csv", fileEncoding = "cp932", row.names = "店名")
dat
# 因子負荷量の初期値
result_none <- fa(dat, nfactors = 2, fm = "ml", rotate = "none")
print(result_none$loadings, cutoff = 0)
# 共通性
result_none$communalities
result_varimax <- fa(dat, nfactors = 2, fm = "ml", rotate = "varimax")
print(result_varimax$loadings, cutoff = 0)
result_varimax$communalities
result_promax <- fa(dat, nfactors = 2, fm = "ml", rotate = "Promax")
print(result_promax$loadings, cutoff = 0)
result_promax$communalities
# 因子間相関
matrix(result_promax$Phi, ncol = 2)
# 因子得点
result_promax$scores
# 因子得点の散布図
par(family = "ヒラギノ角ゴシック W3")   # Macユーザーのみ
plot(result_promax$scores, type = "n")
text(result_promax$scores, labels=rownames(dat), cex = 0.7)
# 目標行列を求める
x <- result_varimax$loadings
Q <- x * abs(x)^3    # 符号を保つためにabs^3にした。
print(Q, cutoff = 0)
# バリマックス回転解に掛ける行列の求め方（仕組み）
u <- data.frame(f1_load = x[, 1], f2_load = x[, 2], q = Q[,1])
lm(q ~ 0+f1_load+f2_load, data = u)
# バリマックス回転解に掛ける行列の求め方（結果）
U <- lm.fit(x, Q)$coefficients    # Qの各列に対して切片0の線形回帰を行う。
U
# x%*%Uを因子負荷行列にすると因子得点の標準偏差が1にならない。
d <- diag(solve(t(U)%*%U))    # 因子得点の標準偏差を1にするためのスケーリングを求める。
x %*% U %*% diag(sqrt(d))
# 結果を`fa(rotate="Promax")`と比較してみよう
print(result_promax$loadings, cutoff = 0)
(-0.029)^2 + 0.654^2 + 2*0.709
(-0.029)^2 + 0.654^2 + 2*(-0.029)*0.654*0.709
# faパッケージの読み込み
# install.packages("psych")
library(psych)
# データの読み込み
dat <- read.csv("./data/ramen.csv", fileEncoding = "cp932", row.names = "店名")
dat
# 因子負荷量の初期値
result_none <- fa(dat, nfactors = 2, fm = "ml", rotate = "none")
print(result_none$loadings, cutoff = 0)
# 共通性
result_none$communalities
result_varimax <- fa(dat, nfactors = 2, fm = "ml", rotate = "varimax")
print(result_varimax$loadings, cutoff = 0)
result_varimax$communalities
result_promax <- fa(dat, nfactors = 2, fm = "ml", rotate = "Promax")
print(result_promax$loadings, cutoff = 0)
result_promax$communalities
# 因子間相関
matrix(result_promax$Phi, ncol = 2)
(-0.029)^2 + 0.654^2 + 2*(-0.029)*0.654*0.709
# 因子得点
result_promax$scores
# 因子得点の散布図
par(family = "ヒラギノ角ゴシック W3")   # Macユーザーのみ
plot(result_promax$scores, type = "n")
text(result_promax$scores, labels=rownames(dat), cex = 0.7)
# 目標行列を求める
x <- result_varimax$loadings
Q <- x * abs(x)^3    # 符号を保つためにabs^3にした。
print(Q, cutoff = 0)
# バリマックス回転解に掛ける行列の求め方（仕組み）
u <- data.frame(f1_load = x[, 1], f2_load = x[, 2], q = Q[,1])
lm(q ~ 0+f1_load+f2_load, data = u)
# バリマックス回転解に掛ける行列の求め方（結果）
U <- lm.fit(x, Q)$coefficients    # Qの各列に対して切片0の線形回帰を行う。
U
# x%*%Uを因子負荷行列にすると因子得点の標準偏差が1にならない。
d <- diag(solve(t(U)%*%U))    # 因子得点の標準偏差を1にするためのスケーリングを求める。
x %*% U %*% diag(sqrt(d))
# 結果を`fa(rotate="Promax")`と比較してみよう
print(result_promax$loadings, cutoff = 0)
