(sqrt(5)-1)/2
data(diabetes)
library(mclust)
data(diabetes)
diabetes
write.csv("diabetes.csv", row.names = FALSE)
write.csv(diabetes, "diabetes.csv", row.names = FALSE)
getwd()
library(mclust)
data(diabetes)
?diabetes
diabetes
library(nomclust)
data(data20)
eskin(data20)
n <-100
prb <- 0.9
muk <- 1.5
clusid <- rep(1:4, each = n)
x1 <- sample(c("A","B"), 2*n, replace = TRUE, x1 <- c(x1, sample(c("A","B"), 2*n, replace = x1 <- as.factor(x1)
x2 <- sample(c("A","B"), 2*n, replace = TRUE, x2 <- c(x2, sample(c("A","B"), 2*n, replace = x2 <- as.factor(x2)
prob = c(prb, 1-prb))
TRUE, prob = c(1-prb, prb)))
prob = c(prb, 1-prb))
TRUE, prob = c(1-prb, prb)))
x3 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk)) x4 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk))
install.packages("clustMixType")
library(clustMixType)
?clprofiles
n   <- 100
prb <- 0.9
muk <- 1.5
clusid <- rep(1:4, each = n)
x1 <- sample(c("A","B"), 2*n, replace = TRUE, prob = c(prb, 1-prb))
x1 <- c(x1, sample(c("A","B"), 2*n, replace = TRUE, prob = c(1-prb, prb)))
x1 <- as.factor(x1)
x2 <- sample(c("A","B"), 2*n, replace = TRUE, prob = c(prb, 1-prb))
x2 <- c(x2, sample(c("A","B"), 2*n, replace = TRUE, prob = c(1-prb, prb)))
x2 <- as.factor(x2)
x3 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk))
x4 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk))
x <- data.frame(x1,x2,x3,x4)
x
n   <- 10
prb <- 0.9
muk <- 1.5
clusid <- rep(1:4, each = n)
x1 <- sample(c("A","B"), 2*n, replace = TRUE, prob = c(prb, 1-prb))
x1 <- c(x1, sample(c("A","B"), 2*n, replace = TRUE, prob = c(1-prb, prb)))
x1 <- as.factor(x1)
x2 <- sample(c("A","B"), 2*n, replace = TRUE, prob = c(prb, 1-prb))
x2 <- c(x2, sample(c("A","B"), 2*n, replace = TRUE, prob = c(1-prb, prb)))
x2 <- as.factor(x2)
x3 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk))
x4 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk))
x <- data.frame(x1,x2,x3,x4)
x
n   <- 10
prb <- 0.8
muk <- 1.5
clusid <- rep(1:4, each = n)
x1 <- sample(c("A","B"), 2*n, replace = TRUE, prob = c(prb, 1-prb))
x1 <- c(x1, sample(c("A","B"), 2*n, replace = TRUE, prob = c(1-prb, prb)))
x1 <- as.factor(x1)
x2 <- sample(c("A","B"), 2*n, replace = TRUE, prob = c(prb, 1-prb))
x2 <- c(x2, sample(c("A","B"), 2*n, replace = TRUE, prob = c(1-prb, prb)))
x2 <- as.factor(x2)
x3 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk))
x4 <- c(rnorm(n, mean = -muk), rnorm(n, mean = muk), rnorm(n, mean = -muk), rnorm(n, mean = muk))
x <- data.frame(x1,x2,x3,x4)
x
write.csv(x, "data01.csv", row.names = FALSE)
kpres <- kproto(x, 4)
clprofiles(kpres, x)
kpres <- kproto(x, 2, lambda = 0.1)
clprofiles(kpres, x)
?clprofiles
1-0.95^126
?lda
library(MASS)
?lda
b
Iris <- data.frame(rbind(iris3[,,1], iris3[,,2], iris3[,,3]),
Sp = rep(c("s","c","v"), rep(50,3)))
train <- sample(1:150, 75)
table(Iris$Sp[train])
## your answer may differ
##  c  s  v
## 22 23 30
z <- lda(Sp ~ ., Iris, prior = c(1,1,1)/3, subset = train)
z
summary(lda)
str(lda)
summary(z)
str(z)
predict(z, Iris[-train, ])
View(kpres)
pi/3+sqrt(3)/2
sqrt(3)
1/2*log(1/2)+1/2*log(1/2)
3/4*log(3/4)+1/4*log(1/4)
2/5*log(2/5)+3/5*log(3/5)
1/5*log(1/5)+4/5*log(4/5)
log(2)
0.613/0/693
0.613/0.693
0.500/0.693
(0.855+0.722)/2
library(numclust)
x <- c(1, 1, 1, 2, 2, 2)
y <- c(1, 2, 2, 2, 2, 2)
dat <- data.frame(x, y)
ve(dat)
VE(dat)
library(nomclust)
x <- c(1, 1, 1, 2, 2, 2)
y <- c(1, 2, 2, 2, 2, 2)
dat <- data.frame(x, y)
ve(dat)
x <- c(1, 2, 1, 2, 1, 2)
y <- c(1, 1, 2, 2, 3, 3)
dat <- data.frame(x, y)
eskin(dat)
n<-c(1,2,3,4,5)
(1+1/n)^n
exp(pi/4)
sqrt(2)/2*1/(2.193)
sqrt(2)/2*1/(2.193^5)
3^20
for(i in 1:20){3^i}
for(i in 1:20){print(3^i)}
3^10
3^10%125
3^10/125
3^10%%125
3^20%%125
3^25%%125
3^50%%125
3^100%%125
3^99%%125
x <- 3
for (n in 1:100){
print(n)
print(x^n%%125)
x <- x%%100
}
x <- 3
for (n in 1:100){
print(n)
print(x%%125)
x <- 3*x%%100
}
76*3
76*3%125
76*3%%125
(76*3)%%125
x <- 3
for (n in 1:100){
print(n)
print(x%%125)
x <- (3*x)%%100
}
3^40
x <- 3
for (n in 1:40){
print(n)
print(x)
x <- (3*x)%%1000
}
x <- 7
for (n in 1:100){
print(n)
print(x)
x <- (7*x)%%10000
}
x <- 3
for (n in 1:20){
print(n)
print(x)
x <- (3*x)%%1000
}
x <- 3
for (n in 1:60){
print(n)
print(x)
x <- (3*x)%%1000
}
x <- 3
for (n in 1:100){
print(n)
print(x)
x <- (3*x)%%1000
}
x <- 3
for (n in 1:100){
print(n)
print(x%%125)
x <- (3*x)%%1000
}
1 - 292.4/689.7
1 - 292.4^2/689.7^2
1 - 292.4^2*16/17/(689.7^2*11/17)
1 - (292.4^2*16/17)/(689.7^2*11/17)
1 - 292.4/689.7
1 - 292.4^2/689.7^2
1 - (292.4^2*11/17)/(689.7^2*16/17)
ToothGrowth
res <- lm(len ~ VC + dose, data = ToothGrowth)
res <- lm(len ~ vc + dose, data = ToothGrowth)
res <- lm(len ~ supp + dose, data = ToothGrowth)
summary(res)
summary(res)
res <- lm(len ~ 1, data = ToothGrowth)
summary(res)
1675*(0.533+0.181)
50*0.48
prop.test(c(24, 1196), c(50, 1675))
library(pwr)
install.packages("pwr")
library(pwr)
?pwr.2p2n.test
pwer.2p2n.test(h = 0.2, n1 = 50, n2 = 1675, sig.level = 0.05)
pwr.2p2n.test(h = 0.2, n1 = 50, n2 = 1675, sig.level = 0.05)
pwr.2p2n.test(h = 0.2, n1 = 50, n2 = 1675, sig.level = 0.05, alternative = "greater")
pwr.2p2n.test(h = 0.2, n1 = 50, n2 = 1675, sig.level = 0.1, alternative = "greater")
pwr.2p2n.test(h = 0.2, n1 = 50, n2 = 1675, sig.level = 0.1, alternative = "two.sided")
pwr.2p2n.test(h = 0.8, n1 = 50, n2 = 1675, sig.level = 0.1, alternative = "two.sided")
pwr.2p2n.test(h = 0.5, n1 = 50, n2 = 1675, sig.level = 0.1, alternative = "two.sided")
2*arcsin(0.7)-2*arcsin(0.5)
2*asin(0.7)-2*asin(0.5)
3.7714/0.14486
-3.7714+0.14486*30
exp(0.28972)
-2.37766-0.06777+0.69531+0.87194
1/(1+e^(-0.87818))
1/(1+exp(-0.87818))
1/(1+exp(0.87818))
(log(20)-log(18))/sqrt(1/10+1/12)
x <- c(15,13,15,16,14,18,17,16,15,18,19,16,17,18,17,15,16)
length(x)
sum((x-mean(x))^2)
# keiyakuデータセットの確認
dat <- read.csv("./data/keiyaku.csv",
row.names = "会社",
fileEncoding = "cp932")
head(dat, n = 5)
# 標本サイズ、次元、変数の名前の確認
str(dat)
# ロジスティック関数
logistic <- function(x){return(1.0/(1.0+exp(-x)))}
curve(logistic, from = -3.0, to = 3.0)
# 最尤推定
lik <- function(x){return(x^3*(1-x)^2)}
curve(lik, from = 0.0, to = 1.0)
# 訪問時刻と契約結果の間の関係
table(dat$訪問時刻, dat$契約結果)
# 担当者年齢と契約結果の間の関係 : 線形性が確認できる。
par(family = "ヒラギノ角ゴシック W3")
plot(dat$担当者年齢, dat$契約結果)
# ロジスティック回帰
result <- glm(契約結果 ~ 訪問時刻 + 担当者年齢,
family = "binomial"
data = dat)
# ロジスティック回帰
result <- glm(契約結果 ~ 訪問時刻 + 担当者年齢,
family = "binomial",
data = dat)
summary(result)
# 訪問時刻を抜いたモデル
result2 <- glm(契約結果 ~ 担当者年齢,
family = "binomial",
data = dat)
summary(result2)
exp(0.26)
# モデル比較
AIC(result); AIC(result2)
?period
library(TSSS)
?period
period
# ピリオドグラムの計算
period(HAKUSAN[,1], window = 0)
# ライブラリの読み込み
library(TSSS)
# データの読み込み
data(HAKUSAN)
# ピリオドグラムの計算
period(HAKUSAN[,1], window = 0)
# 白色雑音の標本自己相関関数とピリオドグラム
r <- as.ts(rnorm(3200))
unicor(r, lag = 50)
period(r, window = 0)
x <- period(r, window = 0)
plot(log10(x$period))
plot(log10(x$period), type = "l")
x <- period(r[1:800], window = 0)
plot(log10(x$period), type = "l")
x <- period(r, window = 0)
plot(log10(x$period), type = "l")
x <- period(r[1:800], window = 0)
plot(log10(x$period), type = "l")
# 白色雑音の標本自己相関関数とピリオドグラム
r <- as.ts(rnorm(3200))
unicor(r, lag = 50)
x <- period(r, window = 0)
plot(log10(x$period), type = "l")
x <- period(r[1:800], window = 0)
plot(log10(x$period), type = "l")
x <- period(r[1:200], window = 0)
plot(log10(x$period), type = "l")
x <- period(r, window = 0, lag = 800)
plot(log10(x$period), type = "l")
x <- period(r, window = 0, lag = 200)
plot(log10(x$period), type = "l")
# ピリオドグラムの平均（Welchの方法）
par(mfrow = c(1, 2))
x <- period(r, window = 0, lag = 800)
plot(log10(x$period), type = "l")
x <- period(r, window = 0, lag = 200)
plot(log10(x$period), type = "l")
# ピリオドグラムの平均（Welchの方法）
par(mfrow = c(1, 2))
x <- period(r, window = 0, lag = 800)
plot(log10(x$period), type = "l")
x <- period(r, window = 0, lag = 200)
plot(log10(x$period), type = "l")
# ピリオドグラムの平均（Welchの方法）
par(mfrow = c(1, 2))
x <- period(r, window = 0, lag = 800)
x <- period(r, window = 0, lag = 200)
par(mfrow = c(3, 2))
x <- period(r, window = 0)
plot(log10(x$period), type = "l")
x <- period(r[1:800], window = 0)
plot(log10(x$period), type = "l")
x <- period(r[1:200], window = 0)
plot(log10(x$period), type = "l")
# 白色雑音の標本自己相関関数とピリオドグラム
r <- as.ts(rnorm(3200))
unicor(r, lag = 50)
par(mfrow = c(3, 2))
x <- period(r, window = 0)
plot(log10(x$period), type = "l")
x <- period(r[1:800], window = 0)
plot(log10(x$period), type = "l")
x <- period(r[1:200], window = 0)
plot(log10(x$period), type = "l")
# ピリオドグラムの平均（Welchの方法）
par(mfrow = c(2, 2))
x <- period(r, window = 0, lag = 800)
plot(log10(x$period), type = "l")
x <- period(r, window = 0, lag = 200)
plot(log10(x$period), type = "l")
# HAKUSANのピリオドグラム
period(HAKUSAN[,1])
# HAKUSANのピリオドグラム
par(mfrow = c(1, 1))
period(HAKUSAN[,1])
# ライブラリの読み込み
library(TSSS)
# データの読み込み
data(HAKUSAN)
data(Sunspot)
data(Temperature)
head(HAKUSAN)
# ピリオドグラムの計算
plot(HAKUSAN[, 1])
period(HAKUSAN[,1], window = 0)
dim(HAKUSAN)
1000*0.1
plot(Sunspot)
period(Sunspot, window = 0)
plot(Sunspot)
period(Sunspot, window = 0)
length(Sunspot)
231*0.09
plot(Temperature)
period(Temperature, window = 0)
plot(Temperature)
# データの読み込み
dat <- read.csv("./data/scores.csv", fileEncoding = "utf-8")
dat
A <- matrix(c(4, 1, 5,
1, 9, 3,
5, 3, 1), nrow = 3, byrow = TRUE)
eigen(A)
# ライブラリの読み込み
library(TSSS)
# データの読み込み
data(HAKUSAN)
data(Sunspot)
data(Temperature)
# ピリオドグラムの計算
plot(HAKUSAN[, 1])
period(HAKUSAN[,1], window = 0)
plot(Sunspot)
period(Sunspot, window = 0)
plot(Temperature)
period(Temperature, window = 0)
# 白色雑音の標本自己相関関数とピリオドグラム
r <- as.ts(rnorm(3200))
unicor(r, lag = 50)
par(mfrow = c(3, 2))
x <- period(r, window = 0)
plot(log10(x$period), type = "l")
x <- period(r[1:800], window = 0)
plot(log10(x$period), type = "l")
x <- period(r[1:200], window = 0)
plot(log10(x$period), type = "l")
# ピリオドグラムの平均（Welchの方法）
par(mfrow = c(2, 2))
x <- period(r, window = 0, lag = 800)
plot(log10(x$period), type = "l")
x <- period(r, window = 0, lag = 200)
plot(log10(x$period), type = "l")
# HAKUSANのピリオドグラム
par(mfrow = c(1, 1))
period(HAKUSAN[,1])
# データの読み込み
data(HAKUSAN)
# ピリオドグラムの計算
plot(HAKUSAN[, 1])
period(HAKUSAN[,1], window = 0)
1/0.1
plot(Sunspot)
period(Sunspot, window = 0)
1/0.9
x<-period(Sunspot, window=0)
x
x$period
period(Sunspot, window = 1, lag = 50)
period(Sunspot, window = 0)
period(Sunspot, window = 1, lag = 50)
period(Sunspot, window = 0)
period(Sunspot, window = 1, lag = 10)
period(Sunspot, window = 1, lag = 50)
which.max(period(Sunspot)$period)
which.max(period(Sunspot)$period)/length(period(Sunspot)$period)
*0.5which.max(period(Sunspot)$period)/length(period(Sunspot)$period)
which.max(period(Sunspot)$period)/length(period(Sunspot)$period)*0.5
1/ (which.max(period(Sunspot)$period)/length(period(Sunspot)$period))
1/ (which.max(period(Sunspot)$period)/length(period(Sunspot)$period)*0.5)
which.max(period(Sunspot)$period)/length(period(Sunspot)$period)*0.5
tmp <- period(Sunspot, windows = 1, lag = 50)
tmp <- period(Sunspot, windows = 1, lag = 50)
warnings()
tmp <- period(Sunspot, window = 1, lag = 50)
which.max(tmp$period)
tmp <- period(Sunspot, window = 1, lag = 100)
which.max(tmp$period)
len(tmp)
len(tmp$period)
length(tmp$period)
length(Sunspot)
18/100
1/0.09
tmp <- period(Sunspot)$period
which.max(tmp)
length(tmp)
tmp <- period(Sunspot, window = 0)$period
which.max(tmp)
length(tmp)
length(Sunspot)
(21/115)*0.5
1.96^2
library(TSSS)
data(Sunspot)
library(TSSS)
data(Sunspot)
plot(Sunspot)
unicor(Sunspot)
period(Sunspot)
period(Sunspot, window = 0)
per <- period(Sunspot, window = 0)
per$period
per <- period(Sunspot, window = 0)$period
length(per)
length(Sunspot)
(231+1)/2
which.max(per)
(21/115)*0.5
1/0.0913
plot(Sunspot)
unicor(Sunspot)
1/0.0913
period(Sunspot, window = 0)
period(Sunspot, lag = 100)
period(Sunspot, window = 1, lag = 100)
period(Sunspot, window = 0)
period(Sunspot, window = 1, lag = 100)
period(Sunspot, window = 0)
period(Sunspot, window = 1, lag = 100)
?period
period(Sunspot, window = 2, lag = 100)
period(Sunspot, window = 1, lag = 100)
period(Sunspot, window = 2, lag = 100)
period(Sunspot, window = 1, lag = 100)
setwd("~/Desktop/すうがくぶんか/集団授業")
setwd("~/Desktop/すうがくぶんか/集団授業/続初級統計学_改訂/lecture06")
# データの読み込み
dat <- read.csv("./data/ramen.csv")
# データの読み込み
dat <- read.csv("./data/ramen.csv", fileEncoding = "cp932")
head(dat, n = 5)
# 店の数（サンプルサイズ）
str(dat)
# データの読み込み
dat <- read.csv("./data/ramen.csv", fileEncoding = "cp932")
dat
?prcomp
1/sqrt(3)
1/sqrt(2)
