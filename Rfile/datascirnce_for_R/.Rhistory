mtcars
?mpg
??mpg
??mpg
??mpg
ggplot(data = mpg)+
geom_plot(mapping = aes(x = hwy, y = cyl))
library(tideverse)
library(tidyverse)
ggplot(data = mpg)+
geom_plot(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg)+
geom_point(mapping = aes(x = hwy, y = cyl))
ggplot(data = mpg)+
geom_point(mapping = aes(x = class, y = drv))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, color = class))
#散布図をclass属性を点の大きさで分ける（層別）
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, size = class))
#散布図をclass属性で透過度分け（層別）
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, alpha = class))
#散布図をclass属性で形分け（層別）
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, shape = class))
#プロット点を全て青色にする
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy), color = "bule")
#プロット点を全て青色にする
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
??mpg
mpg
mpg
ggplot(data = mpg)+
geom_point(mapping = aes(x = model, y = class))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, size = class, color = class))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, size = class, color = class, shape = class))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, stroke = class))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, stroke = cvl))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, stroke = cyl))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, stroke = hwy))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, stroke = class))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, color = cyl, stroke = cyl))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, color = displ < 5))
#ファセット
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = displ, color = hwy))+
facet_wrap(~ class, now = 2)
#ファセット
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = displ, color = hwy))+
facet_wrap(~ class, nrow = 2)
#ファセット
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))+
facet_wrap(~ class, nrow = 2)
#２変数を組み合わせたファセット
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))+
facet_wrap(drv ~ cyl)
#行だけのファセットを作るとき
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))+
facet_wrap(.~ class)
#行だけのファセットを作るとき
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))+
facet_grid(.~ class)
#列だけのファセットを作るとき
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))+
facet_grid(class ~ .)
#1だけのファセットを作るとき
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))+
facet_grid(.~ class)
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))+
facet_wrap(cty ~ cyl)
#２変数を組み合わせたファセット
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))+
facet_wrap(drv ~ cyl)
ggplot(data = mpg)+
geom_point(mapping = aes(x = dvr, y = cyl))
ggplot(data = mpg)+
geom_point(mapping = aes(x = drv, y = cyl))
?facet_wrap
#同じデータ、同じエステティックから違うプロットを作成
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
#上記２つを同じ場所にプロット
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy))+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
geom_smooth(mapping = aes(x = displ, y = hwy))
#上記２つを同じ場所にプロット
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))+
geom_smooth(mapping = aes(x = displ, y = hwy))
#上記２つを同じ場所にプロット
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))+
geom_smooth(mapping = aes(x = displ, y = hwy linetype = drv))
#上記２つを同じ場所にプロット
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
#上記２つを同じ場所にプロット
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy, color = drv))+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv, color = drv))
#コードに重複があり冗長である、これを回避
ggplot(data = mpg, mapping = aes(x = displ, y = hwy))+
geom_point())+
geom_smooth())
#コードに重複があり冗長である、これを回避
ggplot(data = mpg, mapping = aes(x = displ, y = hwy))+
geom_point()+
geom_smooth()
#特定のレイヤーにだけ特別な指示をしたい
ggplot(data = mpg, mapping = aes(x = displ, y = hwy))+
geom_point(mapping = aes(color = class))+
geom_smooth()
#滑らかな曲線を変数の特定グループだけ表示
ggplot(data = mpg, mapping = aes(x = displ, y = hwy))+
geom_point(mapping = aes(color = class))+
geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
#show.legendの役割は？
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
#show.legendの役割は？
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv))
#show.legendの役割は？
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv))+
show.legend = FALSE
#show.legendの役割は？
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv))+
show.legend = FALSE
View(mpg)
#show.legendの役割は？
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv),show.legend = FALSE)
#show.legendの役割は？
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv))
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy, color = drv),show.legend = FALSE)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy))+
geom_point(mapping = aes(color = class))+
geom_smooth(data = filter(mpg, class == "subcompact"))
?geom_point
#<統計変換>#
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
?geom_bar
stat_count(mapping = aes(x = cut)
#これでも同じグラフができる
ggplot(data = diamonds)+
stat_count(mapping = aes(x = cut))
#これでも同じグラフができる
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
#個数ではなく比率をy軸にしたい場ggplot(data = diamonds) +
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
#統計要約量に注目させる
ggplot(data = diamonds) +
stat_summary(mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median)
?stat_summary
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median)
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth))
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth))
?geom_pointrange
geom_pointrange(mapping = aes(x = cut, fun.ymin = min, fun.ymax = max, fun.y = median)
geom_pointrange(mapping = aes(x = cut, fun.ymin = min, fun.ymax = max)
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, fun.ymin = min, fun.ymax = max))
?geom_pointrange
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, fun.y = median))
?geom_pointrange
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(ymin = lower, ymax = upper))
?geom_pointrange
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth), stat = "identity")
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth), stat = "identity",
fun.ymin = min,
fun.ymax = max,
fun.y = median))
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth), stat = "identity",
fun.ymin = min,
fun.ymax = max,
fun.y = median)
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth), stat = "identity",
fun.ymin = lower,
fun.ymax = upper,
fun.y = median)
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth), stat = "identity",
ymin = lower,
ymax = upper,
y = median)
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, ymin = lower, ymax = upper), stat = "identity")
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, ymin = y, ymax = y), stat = "identity")
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, ymin = y))
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth, ymin = y, ymax = y))
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth, ymin = y, ymax = y))
#統計要約量に注目させる
ggplot(data = diamonds) +
stat_summary(mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median)
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth, ymin = y, ymax = y))
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth, ymin = y, ymax = y),stat = "identity")
?stat_summary
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth, ymin = y, ymax = y, group = 1),stat = "identity")
#統計要約量に注目させる
ggplot(data = diamonds) +
stat_summary(mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median)
?stat_summary
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth, ymin = ymin, ymax = ymax, fun,y = midean),stat = "identity")
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth, ymin = ymin, ymax = ymax, fun.y = midean),stat = "identity")
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth, ymin = ymin, ymax = ymax, fun.y = median),stat = "identity")
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth,
fun.ymin = ymin,
fun.ymax = ymax,
fun.y = median),stat = "identity")
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth,
fun.ymin = min,
fun.ymax = max,
fun.y = median),stat = "identity")
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth,
fun.ymin = min,
fun.ymax = max,
fun.y = median))
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median)
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth),
ymin = min,
ymax = max,
y = median)
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth))
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth, ymin = min, ymax = max))
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = median, ymin = min, ymax = max))
data = diamonds %>%
group_by(cut) %>%
summarise(min = min(depth), max = max(depth),
median = median(depth))
ggplot(data) +
geom_pointrange(
mapping = aes(x = cut, y = median, ymin = min, ymax = max))
#stat_smoothについて
?stat_smooth
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color))
#個数ではなく比率をy軸にしたい場ggplot(data = diamonds) +
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop.., group = 1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color))
ggplot(data = diamonds) +
stat_smooth(mapping = aes(x = cut))
#stat_smoothについて
?stat_smooth
diamonds
ggplot(data = diamonds) +
stat_smooth(mapping = aes(x = carat, y = depth))
ggplot(data = diamonds, mapping = aes(x = carat, y = depth)) +
stat_smooth()+
geom_point()
ggplot(data = diamonds, mapping = aes(x = carat, y = depth)) +
stat_smooth()
ggplot(data = diamonds, mapping = aes(x = carat, y = depth)) +
stat_smooth()+
geom_point()
ggplot(data = diamonds, mapping = aes(x = carat, y = depth)) +
stat_smooth()
ggplot(data = diamonds, mapping = aes(x = carat, y = depth)) +
geom_point()
ggplot(data = diamonds, mapping = aes(x = carat, y = depth)) +
geom_point()+
stat_smooth(method = "lm")
ggplot(data = diamonds, mapping = aes(x = carat, y = depth)) +
stat_smooth
ggplot(data = diamonds, mapping = aes(x = carat, y = depth)) +
stat_smooth()
ggplot(data = diamonds, mapping = aes(x = price, y = carat)) +
stat_smooth()
ggplot(data = diamonds, mapping = aes(x = price, y = carat)) +
geom_point()+
stat_smooth()
ggplot(data = diamonds, mapping = aes(x = price, y = carat)) +
stat_smooth()
geom_point()+
ggplot(data = diamonds, mapping = aes(x = price, y = carat)) +
geom_point()+
stat_smooth()
ggplot(data = diamonds, mapping = aes(x = price, y = carat)) +
geom_point()+
stat_smooth()
ggplot(data = diamonds, mapping = aes(x = price, y = carat)) +
geom_point()+
stat_smooth(se = TRUE)
#<位置調整>#
ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut, color = cut))
#棒グラフの塗り潰しの色変え
ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut, filll = cut))
#棒グラフの塗り潰しの色変え
ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut, fill = cut))
#fillの変数を変えてみると？
ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamods, mapping = aes(x = cut, fill = clarity))+
geom_bar(alpha = 1/5, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity))+
geom_bar(alpha = 1/5, position = "identity")
#塗り潰しなし
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity))+
geom_bar(fill = NA, position = "identity")
#塗り潰しなし
ggplot(data = diamonds, mapping = aes(x = cut, color = clarity))+
geom_bar(fill = NA, position = "identity")
#position = "fill"にすると、積み上げの高さが同じになり比較しにくい
ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut, fill = clarity),position = "fill")
#position = "fill"にすると、積み上げの高さが同じになり比較しにくい
ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut, fill = clarity),position = "dodge")
#散布図では、重なるプロットを少しずらして表示できる
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy),position = "jitter")
#散布図では、重なるプロットを少しずらして表示できる
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))
#散布図では、重なるプロットを少しずらして表示できる
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy),position = "jitter")
ggplot(data = mpg)+
geom_box(mapping = aes(x = model, y = displ))
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = model, y = displ))
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = year, y = displ))
ggplot(data = mpg)+
geom_boxplot(mapping = aes(x = class, y = displ))
?geom_boxplot
#＜座標系＞#
#x軸とy軸を交換する
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()+
coord_flip()
install.packages("maps")
library(maps)
library(maps)
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
nz <- map_data("nz")
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")
map_data
ggplot(nz, aes(long, lat, group = group)) +
geom_polygon(fill = "white", color = "black")+
coord_quickmap()
#棒グラフを鶏頭図にするには極座標を使う
bar <- ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut, fill = cut),show.legend = FALSE, width = 1)
#棒グラフを鶏頭図にするには極座標を使う
bar <- ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut, fill = cut),show.legend = FALSE, width = 1)+
theme(aspect.ratio = 1)+
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
?labs
bar + coord_polar()
#棒グラフを鶏頭図にするには極座標を使う
bar <- ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut, fill = cut),show.legend = FALSE, width = 1)+
theme(aspect.ratio = 1)+
labs(x = number, y = NULL)
#棒グラフを鶏頭図にするには極座標を使う
bar <- ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut, fill = cut),show.legend = FALSE, width = 1)+
theme(aspect.ratio = 1)+
labs(x = "number", y = NULL)
bar + coord_flip()
bar + coord_polar()
?aspect.ratio
??aspect.ratio
??aspect.ratio
#棒グラフを鶏頭図にするには極座標を使う
bar <- ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut, fill = cut),show.legend = FALSE, width = 1)+
theme(aspect.ratio = 1:2)+
labs(x = NULL, y = NULL)
bar + coord_flip()
#棒グラフを鶏頭図にするには極座標を使う
bar <- ggplot(data = diamonds)+
geom_bar(mapping = aes(x = cut, fill = cut),show.legend = FALSE, width = 1)+
theme(aspect.ratio = 1)+
labs(x = NULL, y = NULL)
bar + coord_flip()
bar + coord_polar()
?geom_abline
?coord_fixed
#演習
ggplot(data = mpg, mapping = aes(x = cty, y = hwy))+
geom_point()+
geom_abline()+
coord_fixed()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy))+
geom_point()+
geom_abline()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy))+
geom_point()
#演習
ggplot(data = mpg, mapping = aes(x = cty, y = hwy))+
geom_point()+   #散布図をプロット
geom_abline(intercept = 15)+  #回帰線をプロット（切片の指定もできる）
coord_fixed()   #x軸とy軸の間隔を同じにする
#演習
ggplot(data = mpg, mapping = aes(x = cty, y = hwy))+
geom_point()+   #散布図をプロット
geom_abline(intercept = 10)+  #回帰線をプロット（切片の指定もできる）
coord_fixed()   #x軸とy軸の間隔を同じにする
#演習
ggplot(data = mpg, mapping = aes(x = cty, y = hwy))+
geom_point()+   #散布図をプロット
geom_abline(intercept = 5)+  #回帰線をプロット（切片の指定もできる）
coord_fixed()   #x軸とy軸の間隔を同じにする
#演習
ggplot(data = mpg, mapping = aes(x = cty, y = hwy))+
geom_point()+   #散布図をプロット
geom_abline()+  #回帰線をプロット（切片の指定もできる）
coord_fixed()   #x軸とy軸の間隔を同じにする
?geom_abline
View(mpg)
