parameters {
real<lower=0,upper=1> q; //0から1の間のパラメータq(生存確率)
}
model {
for(i in 1:n){
y[i] ~ binomial(N,q); //yの値が確率qの二項分布に従うモデル
}
}
binomial_model <- '
data {
int n; //標本数
int<lower=0> N; //観測種子数
int<lower=0> y[n]; //種子8個当たりの生存数(目的変数)
}
parameters {
real<lower=0,upper=1> q; //0から1の間のパラメータq(生存確率)
}
model {
for(i in 1:n){
y[i] ~ binomial(N,q); //yの値が確率qの二項分布に従うモデル
}
}
'
binomial_model <- '
data {
int n; #標本数
int<lower=0> N; #観測種子数
int<lower=0> y[n]; #種子8個当たりの生存数(目的変数)
}
parameters {
real<lower=0,upper=1> q; #0から1の間のパラメータq(生存確率)
}
model {
for(i in 1:n){
y[i] ~ binomial(N,q); #yの値が確率qの二項分布に従うモデル
}
}
'
data {
int n; // サンプルサイズ
int<lower=0> N[n]; // 観測種子数
int<lower=0> y[n]; // 生存種子数
real<lower=0> x[n]; //体サイズ
int<lower=0,upper=1> fT[n]; //ダミー変数化した施肥処理
}
parameters {
real beta0; //切片
real betax; //xの係数
real betaf; //fの係数
}
transformed parameters {
real<lower=0,upper=1> q[n]; //生存確率
for(i in 1:n){
q[i] = inv_logit(beta0+betax*x[i]+betaf*fT[i]); //生存確率の回帰式
}
}
model {
for(i in 1:n){
y[i] ~ binomial(N[i],q[i]); //二項分布で生存種子数をモデリング
}
beta0~normal(0,100); //回帰係数の無情報事前分布
betax~normal(0,100); //平均0,標準偏差100の正規分布
betaf~normal(0,100);
}
'
logistic.model <- '
data {
int n; // サンプルサイズ
int<lower=0> N[n]; // 観測種子数
int<lower=0> y[n]; // 生存種子数
real<lower=0> x[n]; //体サイズ
int<lower=0,upper=1> fT[n]; //ダミー変数化した施肥処理
}
parameters {
real beta0; //切片
real betax; //xの係数
real betaf; //fの係数
}
transformed parameters {
real<lower=0,upper=1> q[n]; //生存確率
for(i in 1:n){
q[i] = inv_logit(beta0+betax*x[i]+betaf*fT[i]); //生存確率の回帰式
}
}
model {
for(i in 1:n){
y[i] ~ binomial(N[i],q[i]); //二項分布で生存種子数をモデリング
}
beta0~normal(0,100); //回帰係数の無情報事前分布
betax~normal(0,100); //平均0,標準偏差100の正規分布
betaf~normal(0,100);
}
'
logistic.model
#
set.seed(1)
# モデルへの当てはめ
fit <- stan(
model_code = logistic.model,
data = seed.dat,
iter = 1000, #MCMCステップ数
warmup=100, #最初のwarmupステップは無視する(p.181参照)
thin = 1, #間引き感覚
chains = 3 #並列繰り返し
)
#中身を見る
fit
# 各パラメータだけみる
print(fit, pars = "q")
print(fit, pars = c("bata0","batax","bataf")
print(fit, pars = c("bata0","batax","bataf"))
print(fit, pars = c("bata0","batax","bataf"))
print(fit, pars =c("beta0","betax","betaf"))
#Rhatだけ確認するなら下記も使えます.
stan_rhat(fit) #rhatのヒストグラム.
all(stan_rhat(fit)$data < 1.10, na.rm = T) #全部1.10未満ならTRUEを返す.
traceplot(fit, pars ="beta0")
traceplot(fit, pars ="betax")
traceplot(fit, pars ="betaf")
# glm推定
fit.glm <- glm(cbind(y,N-y)~x+f, data = d, family = binomial)
beta0 <- get_posterior_mean(fit, par = 'beta0')[, 'mean-all chains']# 平均が入っている場所
betax <- get_posterior_mean(fit, par = 'betax')[, 'mean-all chains']
betaf <- get_posterior_mean(fit, par = 'betaf')[, 'mean-all chains']
print(c(beta0,betax,betaf))
#glm()による最尤推定値
fit.glm$coefficient
library(rstan)
library(dplyr)
d <- read.csv("./hbm/data7a.csv")
head(d)
hist(d$y)
hie_model <- ' data {
int<lower=0> n; // サンプルサイズ
int<lower=0> y[n]; // 種子8個当たりの生存数 }
parameters {
real beta; // 全個体共通のロジスティック偏回帰係数 real r[n]; // 個体差
real<lower=0> s; // 個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); // 生存確率を個体差でロジット変換 }
}
model {
//生存確率
q[i]の二項分布 for (i in 1:n){
y[i] ~ binomial(8,q[i]); }
//betaの無情報事前分布
beta~normal(0,100);
//個体差の階層事前分布
for (i in 1:n)
r[i]~normal(0,s); // 個体差の階層事前分布 s~uniform(0,10000); // sの無情報事前分布
}
'
hie_model <- '
data {
int<lower=0> n; // サンプルサイズ
int<lower=0> y[n]; // 種子8個当たりの生存数 }
parameters {
real beta; // 全個体共通のロジスティック偏回帰係数 real r[n]; // 個体差
real<lower=0> s; // 個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); // 生存確率を個体差でロジット変換 }
}
model {
//生存確率
q[i]の二項分布 for (i in 1:n){
y[i] ~ binomial(8,q[i]);}
//betaの無情報事前分布
beta~normal(0,100);
//個体差の階層事前分布
for (i in 1:n)
r[i]~normal(0,s); // 個体差の階層事前分布
s~uniform(0,10000); // sの無情報事前分布
}
'
# データを作成
hie_data <- list(y = d$y, n = length(d$y))
set.seed(1)
fit <- stan(
model_code = hie_model,
data = hie_data,
iter = 1000, #MCMCステップ数
warmup=100, #最初のwarmupステップは無視する(p.181参照) thin = 1, #間引き感覚
chains = 3 #並列繰り返し
)
fit <- stan(
model_code = hie_model,
data = hie_data,
iter = 1000, #MCMCステップ数
warmup=100, #最初のwarmupステップは無視する(p.181参照)
thin = 1, #間引き感覚
chains = 3 #並列繰り返し
)
library(dplyr)
library(rstan)
library(rstan)
library(dplyr)
d <- read.csv("./hbm/data7a.csv")
hie_model <- '
data {
int<lower=0> n; // サンプルサイズ
int<lower=0> y[n]; // 種子8個当たりの生存数 }
parameters {
real beta; // 全個体共通のロジスティック偏回帰係数 real r[n]; // 個体差
real<lower=0> s; // 個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); // 生存確率を個体差でロジット変換 }
}
model {
//生存確率
q[i]の二項分布 for (i in 1:n){
y[i] ~ binomial(8,q[i]);}
//betaの無情報事前分布
beta~normal(0,100);
//個体差の階層事前分布
for (i in 1:n)
r[i]~normal(0,s); // 個体差の階層事前分布
s~uniform(0,10000); // sの無情報事前分布
}
hie_model <- '
data {
int<lower=0> n; // サンプルサイズ
int<lower=0> y[n]; // 種子8個当たりの生存数 }
parameters {
real beta; // 全個体共通のロジスティック偏回帰係数 real r[n]; // 個体差
real<lower=0> s; // 個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); // 生存確率を個体差でロジット変換 }
}
model {
//生存確率
q[i]の二項分布 for (i in 1:n){
y[i] ~ binomial(8,q[i]);}
//betaの無情報事前分布
beta~normal(0,100);
//個体差の階層事前分布
for (i in 1:n)
r[i]~normal(0,s); // 個体差の階層事前分布
s~uniform(0,10000); // sの無情報事前分布
}
'
hie_model <- '
data {
int<lower=0> n; // サンプルサイズ
int<lower=0> y[n]; // 種子8個当たりの生存数
}
parameters {
real beta; // 全個体共通のロジスティック偏回帰係数 real r[n]; // 個体差
real<lower=0> s; // 個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); // 生存確率を個体差でロジット変換 }
}
model {
//生存確率
q[i]の二項分布 for (i in 1:n){
y[i] ~ binomial(8,q[i]);}
//betaの無情報事前分布
beta~normal(0,100);
//個体差の階層事前分布
for (i in 1:n)
r[i]~normal(0,s); // 個体差の階層事前分布
s~uniform(0,10000); // sの無情報事前分布
}
'
hie_model <- ' data {
int<lower=0> n; // サンプルサイズ
int<lower=0> y[n]; // 種子8個当たりの生存数 }
parameters {
real beta; // 全個体共通のロジスティック偏回帰係数 real r[n]; // 個体差
real<lower=0> s; // 個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); // 生存確率を個体差でロジット変換 }
}
model {
//生存確率q[i]の二項分布 for (i in 1:n){
y[i] ~ binomial(8,q[i]); }
//betaの無情報事前分布 beta~normal(0,100);
//個体差の階層事前分布 for (i in 1:n)
r[i]~normal(0,s); // 個体差の階層事前分布 s~uniform(0,10000); // sの無情報事前分布
}
'
hie_model <- ' data {
int<lower=0> n; // サンプルサイズ
int<lower=0> y[n]; // 種子8個当たりの生存数 }
parameters {
real beta; // 全個体共通のロジスティック偏回帰係数 real r[n]; // 個体差
real<lower=0> s; // 個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); // 生存確率を個体差でロジット変換 }
}
model {
//生存確率q[i]の二項分布 for (i in 1:n){
y[i] ~ binomial(8,q[i]); }
//betaの無情報事前分布 beta~normal(0,100);
//個体差の階層事前分布 for (i in 1:n)
r[i]~normal(0,s); // 個体差の階層事前分布 s~uniform(0,10000); // sの無情報事前分布
}
'
hie_model <- '
data {
int<lower=0> n; // サンプルサイズ
int<lower=0> y[n]; // 種子8個当たりの生存数
}
parameters {
real beta; // 全個体共通のロジスティック偏回帰係数 real r[n]; // 個体差
real<lower=0> s; // 個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); // 生存確率を個体差でロジット変換 }
}
model {
//生存確率q[i]の二項分布 for (i in 1:n){
y[i] ~ binomial(8,q[i]); }
//betaの無情報事前分布 beta~normal(0,100);
//個体差の階層事前分布 for (i in 1:n)
r[i]~normal(0,s); // 個体差の階層事前分布 s~uniform(0,10000); // sの無情報事前分布
}
'
hie_model <- '
data {
int<lower=0> n; // サンプルサイズ
int<lower=0> y[n]; // 種子8個当たりの生存数
}
parameters {
real beta; // 全個体共通のロジスティック偏回帰係数 real r[n]; // 個体差
real<lower=0> s; // 個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); // 生存確率を個体差でロジット変換 }
}
model {
//生存確率q[i]の二項分布
for (i in 1:n){
y[i] ~ binomial(8,q[i]);
}
//betaの無情報事前分布
beta~normal(0,100);
//個体差の階層事前分布
for (i in 1:n)
r[i]~normal(0,s); // 個体差の階層事前分布
s~uniform(0,10000); // sの無情報事前分布
}
'
hie_model <- '
data {
int<lower=0> n; #サンプルサイズ
int<lower=0> y[n]; #種子8個当たりの生存数
}
parameters {
real beta; #全個体共通のロジスティック偏回帰係数 real r[n]; // 個体差
real<lower=0> s; #個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); #生存確率を個体差でロジット変換 }
}
model {
#生存確率q[i]の二項分布
for (i in 1:n){
y[i] ~ binomial(8,q[i]);
}
#betaの無情報事前分布
beta~normal(0,100);
#個体差の階層事前分布
for (i in 1:n)
r[i]~normal(0,s); #個体差の階層事前分布
s~uniform(0,10000); #sの無情報事前分布
}
'
hie_model <- '
data {
int<lower=0> n; #サンプルサイズ
int<lower=0> y[n]; #種子8個当たりの生存数
}
parameters {
real beta; #全個体共通のロジスティック偏回帰係数 real r[n]; // 個体差
real<lower=0> s; #個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); #生存確率を個体差でロジット変換 }
}
model {
#生存確率q[i]の二項分布
for (i in 1:n){
y[i] ~ binomial(8,q[i]);
}
#betaの無情報事前分布
beta~normal(0,100);
#個体差の階層事前分布
for (i in 1:n)
r[i]~normal(0,s); #個体差の階層事前分布
s~uniform(0,10000); #sの無情報事前分布
}
'
hie_model <- '
data {
int<lower=0> n; #サンプルサイズ
int<lower=0> y[n]; #種子8個当たりの生存数
}
parameters {
real beta; #全個体共通のロジスティック偏回帰係数
real r[n]; #個体差
real<lower=0> s; #個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); #生存確率を個体差でロジット変換
}
}
model {
#生存確率q[i]の二項分布
for (i in 1:n){
y[i] ~ binomial(8,q[i]);
}
#betaの無情報事前分布
beta~normal(0,100);
#個体差の階層事前分布
for (i in 1:n)
r[i]~normal(0,s); #個体差の階層事前分布
s~uniform(0,10000); #sの無情報事前分布
}
'
hie_model <- '
data {
int<lower=0> n; #サンプルサイズ
int<lower=0> y[n]; #種子8個当たりの生存数
}
parameters {
real beta; #全個体共通のロジスティック偏回帰係数
real r[n]; #個体差
real<lower=0> s; #個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); #生存確率を個体差でロジット変換
}
}
model {
#生存確率q[i]の二項分布
for (i in 1:n){
y[i] ~ binomial(8,q[i]);
}
#betaの無情報事前分布
beta~normal(0,100);
#個体差の階層事前分布
for (i in 1:n)
r[i]~normal(0,s); #個体差の階層事前分布
s~uniform(0,10000); #sの無情報事前分布
}
'
hie_model <- '
data {
int<lower=0> n; #サンプルサイズ
int<lower=0> y[n]; #種子8個当たりの生存数
}
parameters {
real beta; #全個体共通のロジスティック偏回帰係数
real r[n]; #個体差
real<lower=0> s; #個体差の標準偏差
}
transformed parameters {
real q[n];
for (i in 1:n){
q[i] = inv_logit(beta+r[i]); #生存確率を個体差でロジット変換
}
}
model {
#生存確率q[i]の二項分布
for (i in 1:n){
y[i] ~ binomial(8,q[i]);
}
#betaの無情報事前分布
beta~normal(0,100);
#個体差の階層事前分布
for (i in 1:n)
r[i]~normal(0,s); #個体差の階層事前分布
s~uniform(0,10000); #sの無情報事前分布
}
'
hie_model
hie_model
# データを作成
hie_data <- list(y = d$y, n = length(d$y))
