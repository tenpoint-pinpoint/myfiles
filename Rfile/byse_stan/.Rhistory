T = nrow(sales_df_3$sales)
)
local_level <- stan(
file = "5_2_local_level.stan",
data = dat_list,
seed = 1
)
## ローカルレベルモデルのmcmc実行
dat_list <- list(
y = sales_df_3$sales,
T = nrow(sales_df_3)
)
local_level <- stan(
file = "5_2_local_level.stan",
data = dat_list,
seed = 1
)
# 収束確認
mcmc_rhat(rhat(local_level))
# 結果出力
print(local_level,
pars = c("s_w", "s_v", "lp__"),
probs = c(0.025, 0.5, 0.975))
## 平滑化トレンドモデルの実行
smooth_trend <- stan(
file "5_5_smooth_trend.stan",
## 平滑化トレンドモデルの実行
smooth_trend <- stan(
file = "5_5_smooth_trend.stan",
data = dat_list,
seed = 1
)
## 平滑化トレンドモデルの実行
smooth_trend <- stan(
file = "5_5_smooth_trend.stan",
data = dat_list,
seed = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.9, max_treedepth = 15)
)
## 平滑化トレンドモデルの実行
smooth_trend <- stan(
file = "5_5_smooth_trend.stan",
data = dat_list,
seed = 1,
chains = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.9, max_treedepth = 15)
)
# 収束の確認
mcmc_rhat(rhat(smooth_trend))
## 平滑化トレンドモデルの実行
smooth_trend <- stan(
file = "5_5_smooth_trend.stan",
data = dat_list,
seed = 1,
#chains = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.9, max_treedepth = 15)
)
## 平滑化トレンドモデルの実行
smooth_trend <- stan(
file = "5_5_smooth_trend.stan",
data = dat_list,
seed = 1,
chains = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.9, max_treedepth = 15)
)
## 平滑化トレンドモデルの実行
smooth_trend <- stan(
file = "5_5_smooth_trend.stan",
data = dat_list,
seed = 1,
chains = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.9, max_treedepth = 15)
)
## ローカルレベルモデルのmcmc実行
dat_list <- list(
y = sales_df_3$sales,
T = nrow(sales_df_3)
)
## 平滑化トレンドモデルの実行
smooth_trend <- stan(
file = "5_5_smooth_trend.stan",
data = dat_list,
seed = 1,
chains = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.9, max_treedepth = 15)
)
## 平滑化トレンドモデルの実行
smooth_trend <- stan(
file = "5_5_smooth_trend.stan",
data = dat_list,
seed = 1,
chains = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.9, max_treedepth = 15)
)
## 平滑化トレンドモデルの実行
smooth_trend <- stan(
file = "5_5_smooth_trend.stan",
data = dat_list,
seed = 1,
#chains = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.9, max_treedepth = 15)
)
# 収束の確認
mcmc_rhat(rhat(smooth_trend))
#結果の出力
print(smooth_trend,
pars = c"s_z", "s_v", "lp__",
#結果の出力
print(smooth_trend,
pars = c("s_z", "s_v", "lp__"),
probs = c(0.025, 0,5, 0.975))
#結果の出力
print(smooth_trend,
pars = c("s_z", "s_v", "lp__"),
probs = c(0.025, 0.5, 0.975)
)
# 結果出力
print(local_level,
pars = c("s_w", "s_v", "lp__"),
probs = c(0.025, 0.5, 0.975))
## ローカル線形トレンドモデルのmcmc実行
liner_smooth_trend <- stan(
file = "5_5_liner_smooth.stan",
data = dat_list,
seed = 1,
iter = 8000,
warmup = 2000,
thin = 6
)
# 収束の確認
mcmc_rhat(rhat(liner_smooth_trend))
# 結果出力
print(liner_smooth_trend,
pars = c("s_w", "s_v", "s_z", "lp__"),
probs = c(0.025, 0.5, 0.975)
)
mcmc_sample_local <- rstan::extract(local_level)
mcmc_sample_smooth <- rstan::extract(smooth_trend)
mcmc_sample_liner_trend <- rstan::extract(liner_smooth_trend)
p_local <- plotSSM(
mcmc_sample = mcmc_sample_local,
time_vec = sales_df_3$date,
obs_vec = sales_df_3$sales,
state_name = "mu",
graph_title = "lolac_level",
y_label = "sales"
)
p_smooth <- plotSSM(
mcmc_sample = mcmc_sample_smooth,
time_vec = sales_df_3$date,
obs_vec = sales_df_3$sales,
state_name = "mu",
graph_title = "smooth_trend",
y_label = "sales"
)
p_liler_trend <- plotSSM(
mcmc_sample = mcmc_sample_liner_trend,
time_vec = sales_df_3$date,
obs_vec = sales_df_3$sales,
state_name = "mu",
graph_title = "local_liner_trend",
y_label = "sales"
)
grid.arrange(p_local, p_smooth, p_liler_trend)
# 結果出力
print(local_level,
pars = c("s_w", "s_v", "lp__"),
probs = c(0.025, 0.5, 0.975))
#結果の出力
print(smooth_trend,
pars = c("s_z", "s_v", "lp__"),
probs = c(0.025, 0.5, 0.975)
)
# 結果出力
print(liner_smooth_trend,
pars = c("s_w", "s_v", "s_z", "lp__"),
probs = c(0.025, 0.5, 0.975)
)
# ドリフト成分の可視化
plotSSM(mcmc_sample = mcmc_sample_liner_trend,
time_vec = sales_df_3$date,
state_name = "delta",
graph_title = "drift",
y_label = " delta"
)
library(rstan)
library(bayesplot)
library(ggfortify)
library(gridExtra)
rstan_options(auto_write = T)
options(mc.cores = parallel::detectCores())
source("plotSSM.R", encoding = "utf-8")
sales_df_4 <- reaf.csv(file.choose())
sales_df_4 <- read.csv(file.choose())
sales_df_4$date <- as.POSIXct(sales_df_4$date)
head(sales_df_4)
# まずは図示
autoplot(ts(sales_df_4))
# まずは図示
autoplot(ts(sales_df_4)[,1])
# まずは図示
autoplot(ts(sales_df_4)[,2])
# mcmcの実行
dat_list  <- list(
T = nrow(sales_df_4),
y = sales_df_4$sales
)
basic_srtucture <- stan(
file = "5_6_basic_sts.stan",
data = dat_list,
seed = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.97, max_treedepth = 15)
)
# 収束チェック
mcmc_rhat(rhat(basic_srtucture))
# 出力結果
print(basic_srtucture,
pars = c("s_z", "s_s", "s_v", "lp__"),
probs = c(0.025, 0,5, 0,975))
# 出力結果
print(basic_srtucture,
pars = c("s_z", "s_s", "s_v", "lp__"),
probs = c(0.025, 0.5, 0,975))
# 出力結果
print(basic_srtucture,
pars = c("s_z", "s_s", "s_v", "lp__"),
probs = c(0.025, 0.5, 0.975))
# 図示
mcmc_sample <- rstan::extract(basic_srtucture)
p_alpha <- plotSSM(
mcmc_sample = basic_srtucture,
time_vec = sales_df_4$date,
obs_vec = sales_df_4$sales,
state_name = "alpha",
graph_title = "all state(mu+alpha) param",
y_lavel = "sales"
)
p_alpha <- plotSSM(
mcmc_sample = basic_srtucture,
time_vec = sales_df_4$date,
obs_vec = sales_df_4$sales,
state_name = "alpha",
graph_title = "all state(mu+alpha) param",
y_label = "sales"
)
p_alpha <- plotSSM(
mcmc_sample = basic_srtucture,
time_vec = sales_df_4$date,
obs_vec = sales_df_4$sales,
state_name = "alpha",
graph_title = "all state(mu+alpha) param",
y_label = "sales"
)
p_trend <- plotSSM(
mcmc_sample = basic_srtucture,
time_vec = sales_df_4$date,
obs_vec = sales_df_4$sales,
state_name = "mu",
graph_title = "trend（mu）param",
y_label = "sales"
)
p_alpha <- plotSSM(
mcmc_sample = mcmc_sample,
time_vec = sales_df_4$date,
obs_vec = sales_df_4$sales,
state_name = "alpha",
graph_title = "all state(mu+alpha) param",
y_label = "sales"
)
p_trend <- plotSSM(
mcmc_sample = mcmc_sample,
time_vec = sales_df_4$date,
obs_vec = sales_df_4$sales,
state_name = "mu",
graph_title = "trend（mu）param",
y_label = "sales"
)
p_cycle <- plotSSM(
mcmc_sample = mcmc_sample,
time_vec = sales_df_4$date,,
state_name = "gamma",
graph_title = "cycle）param",
y_label = "gamma"
)
grid.arrange(p_alpha, p_trend, p_cycle)
p_trend <- plotSSM(
mcmc_sample = mcmc_sample,
time_vec = sales_df_4$date,
obs_vec = sales_df_4$sales,
state_name = "mu",
graph_title = "trend(mu)param",
y_label = "sales"
)
p_cycle <- plotSSM(
mcmc_sample = mcmc_sample,
time_vec = sales_df_4$date,,
state_name = "gamma",
graph_title = "cycle param",
y_label = "gamma"
)
grid.arrange(p_alpha, p_trend, p_cycle)
library(rstan)
library(bayesplot)
library(KFAS)
install.packages("KFAS")
library(rstan)
library(bayesplot)
library(KFAS)
rstan_options(auto_write = T)
options(mc.cores = parallel::detectCores())
source("plotSSM", encoding = "utf-8")
source("plotSSM.R", encoding = "utf-8")
data("boat")
boat
log(0.8/(1-0.8))
logit <- log(0.8/(1-0.8))
logit
1/(1+exp(-logit))
1/(1+exp(-logit))
logit
exp(logit)
x <- log(0.8/(1-0.8))
x
exp(x)
1/(1+exp(-x))
x
1/(1+exp(-x))
boat_omit_NA <- na.omit(as.numeric(boat))
head(boat_omit_NA)
head(boat_omit_NA)
dat_list <- list(
T = length(boat),
len_obs = length(boat_omit_NA),
y = boat_omit_NA,
obs_no = which(!is.na(boat))
)
length(boat)
dglm_binom <- stan(
file = "5_8_dglm_binom.stan",
data = dat_list,
seed = 1,
iter = 30000,
warmup = 10000,
thin = 20
)
# 収束の確認
mcmc_rhat(rhat(dglm_binom))
mcmc_sample <- rstan::extract(dglm_binom)
print(dglm_binom,
pars = c("s_w", "lp__"),
probs = c(0.025, 0,5, 0.975))
print(dglm_binom,
pars = c("s_w", "lp__"),
probs = c(0.025, 0.5, 0.975))
# 勝率の図示（yではなくpを描画）
years <- seq(from = as.POSIXct("1829-01-01"),
by = "1 year",
len = length(boat))
plotSSM(mcmc_sample = mcmc_sample,
time_vec = years,
obs_vec = as.numeric(boat),
state_name = "probs",
graph_title = "cembridge's win rate",
y_label = "win rate",
date_labels = "%Y"
)
library(rstan)
library(bayesplot)
library(ggfortify)
library(gridExtra)
rstan_options(auto_write = T)
options(mc.cores = parallel::detectCores())
source("plotSSM.R", encoding = "utf-8")
fish_ts <- read.csv(file.choose())
fish_ts$date <- as.POSIXct(fish_ts$date)
head(fish_ts)
# まずは図示
autoplot(ts(fish_ts))
# まずは図示
autoplot(ts(fish_ts)[,-2])
# まずは図示
autoplot(ts(fish_ts)[,-1])
# mcmcの実行
dat_list <- list(
T = nrow(fish_ts),
ex = fish_ts$temperature,
y = fish_ts$fish_num
)
dglm_poisson <- stan(
file = "5_9_dglm_poisson.stan",
data = dat_list,
seed = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.99, max_treedepth = 15)
)
# 収束チェック
mcmc_rstan(rstan(dglm_poisson))
# 収束チェック
mcmc_rhat(rhat(dglm_poisson))
# 結果表示
print(dglm_poisson,
pars = c("s_z", "s_r", "b", "lp__"),
probs = c(0.025, 0.5, 0.975))
exp(3.04)
log(3.04)
dglm_poisson <- stan(
file = "5-9--1-dglm-poisson.stan",
data = dat_list,
seed = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.99, max_treedepth = 15)
)
dglm_poisson <- stan(
file = "5-9-1-dglm-poisson.stan",
data = dat_list,
seed = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.99, max_treedepth = 15)
)
dglm_poisson <- stan(
file = "5-9-1-dglm-poisson.stan",
data = dat_list,
seed = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.99, max_treedepth = 15)
)
# 結果表示
print(dglm_poisson,
pars = c("s_z", "s_r", "b", "lp__"),
probs = c(0.025, 0.5, 0.975))
dglm_poisson <- stan(
file = "5_9_dglm_poisson.stan",
data = dat_list,
seed = 1,
iter = 8000,
warmup = 2000,
thin = 6,
control = list(adapt_delta = 0.99, max_treedepth = 15)
)
# 収束チェック
mcmc_rhat(rhat(dglm_poisson))
# 結果表示
print(dglm_poisson,
pars = c("s_z", "s_r", "b", "lp__"),
probs = c(0.025, 0.5, 0.975))
# 描画
mcmc_sample <- rstan:extract(dglm_poisson)
# 描画
mcmc_sample <- rstan::extract(dglm_poisson)
p_all <- plotSSM(
mcmc_sample = mcmc_sample,
time_vec = fish_ts$date,
obs_vec = fish_ts$fish_num,
state_name = "lambda_exp",
graph_title = "est_lambda",
y_label = "fish_num",
date_labels = "%Y-%m-%d"
)
p_smooth <- plotSSM(
mcmc_sample = mcmc_sample,
time_vec = fish_ts$date,
obs_vec = fish_ts$fish_num,
state_name = "lambda_smooth",
graph_title = "est_lambda except random_effect",
y_label = "fish_num",
date_labels = "%Y-%m-%d"
)
p_fix <- plotSSM(
mcmc_sample = mcmc_sample,
time_vec = fish_ts$date,
obs_vec = fish_ts$fish_num,
state_name = "lambda_smooth_fix",
graph_title = "est_lambda except random_effect and fix coef",
y_label = "fish_num",
date_labels = "%Y-%m-%d"
)
grid.arrange(p_all, p_smooth, p_fix)
